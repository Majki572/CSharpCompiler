//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from f:/GitHubRepository/CSharpCompiler/Compiler/Grammar/LangX.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="LangXParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public interface ILangXListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="LangXParser.start"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStart([NotNull] LangXParser.StartContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LangXParser.start"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStart([NotNull] LangXParser.StartContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LangXParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatement([NotNull] LangXParser.StatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LangXParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatement([NotNull] LangXParser.StatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LangXParser.read"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRead([NotNull] LangXParser.ReadContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LangXParser.read"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRead([NotNull] LangXParser.ReadContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LangXParser.write"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWrite([NotNull] LangXParser.WriteContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LangXParser.write"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWrite([NotNull] LangXParser.WriteContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>assignIntFloat</c>
	/// labeled alternative in <see cref="LangXParser.assign"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignIntFloat([NotNull] LangXParser.AssignIntFloatContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>assignIntFloat</c>
	/// labeled alternative in <see cref="LangXParser.assign"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignIntFloat([NotNull] LangXParser.AssignIntFloatContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>assignString</c>
	/// labeled alternative in <see cref="LangXParser.assign"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignString([NotNull] LangXParser.AssignStringContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>assignString</c>
	/// labeled alternative in <see cref="LangXParser.assign"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignString([NotNull] LangXParser.AssignStringContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>assignVar</c>
	/// labeled alternative in <see cref="LangXParser.assign"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignVar([NotNull] LangXParser.AssignVarContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>assignVar</c>
	/// labeled alternative in <see cref="LangXParser.assign"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignVar([NotNull] LangXParser.AssignVarContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>addIntFloat</c>
	/// labeled alternative in <see cref="LangXParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAddIntFloat([NotNull] LangXParser.AddIntFloatContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>addIntFloat</c>
	/// labeled alternative in <see cref="LangXParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAddIntFloat([NotNull] LangXParser.AddIntFloatContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>subIntFloat</c>
	/// labeled alternative in <see cref="LangXParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSubIntFloat([NotNull] LangXParser.SubIntFloatContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>subIntFloat</c>
	/// labeled alternative in <see cref="LangXParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSubIntFloat([NotNull] LangXParser.SubIntFloatContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>expression1Empty</c>
	/// labeled alternative in <see cref="LangXParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpression1Empty([NotNull] LangXParser.Expression1EmptyContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expression1Empty</c>
	/// labeled alternative in <see cref="LangXParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpression1Empty([NotNull] LangXParser.Expression1EmptyContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>mulIntFloat</c>
	/// labeled alternative in <see cref="LangXParser.expression1"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMulIntFloat([NotNull] LangXParser.MulIntFloatContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>mulIntFloat</c>
	/// labeled alternative in <see cref="LangXParser.expression1"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMulIntFloat([NotNull] LangXParser.MulIntFloatContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>divIntFloat</c>
	/// labeled alternative in <see cref="LangXParser.expression1"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDivIntFloat([NotNull] LangXParser.DivIntFloatContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>divIntFloat</c>
	/// labeled alternative in <see cref="LangXParser.expression1"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDivIntFloat([NotNull] LangXParser.DivIntFloatContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>expression2Empty</c>
	/// labeled alternative in <see cref="LangXParser.expression1"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpression2Empty([NotNull] LangXParser.Expression2EmptyContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expression2Empty</c>
	/// labeled alternative in <see cref="LangXParser.expression1"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpression2Empty([NotNull] LangXParser.Expression2EmptyContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>andIntFloat</c>
	/// labeled alternative in <see cref="LangXParser.expression2"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAndIntFloat([NotNull] LangXParser.AndIntFloatContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>andIntFloat</c>
	/// labeled alternative in <see cref="LangXParser.expression2"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAndIntFloat([NotNull] LangXParser.AndIntFloatContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>orIntFloat</c>
	/// labeled alternative in <see cref="LangXParser.expression2"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOrIntFloat([NotNull] LangXParser.OrIntFloatContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>orIntFloat</c>
	/// labeled alternative in <see cref="LangXParser.expression2"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOrIntFloat([NotNull] LangXParser.OrIntFloatContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>xorIntFloat</c>
	/// labeled alternative in <see cref="LangXParser.expression2"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterXorIntFloat([NotNull] LangXParser.XorIntFloatContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>xorIntFloat</c>
	/// labeled alternative in <see cref="LangXParser.expression2"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitXorIntFloat([NotNull] LangXParser.XorIntFloatContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>negIntFloat</c>
	/// labeled alternative in <see cref="LangXParser.expression2"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNegIntFloat([NotNull] LangXParser.NegIntFloatContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>negIntFloat</c>
	/// labeled alternative in <see cref="LangXParser.expression2"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNegIntFloat([NotNull] LangXParser.NegIntFloatContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>expression4Empty</c>
	/// labeled alternative in <see cref="LangXParser.expression2"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpression4Empty([NotNull] LangXParser.Expression4EmptyContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expression4Empty</c>
	/// labeled alternative in <see cref="LangXParser.expression2"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpression4Empty([NotNull] LangXParser.Expression4EmptyContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>int</c>
	/// labeled alternative in <see cref="LangXParser.expression3"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInt([NotNull] LangXParser.IntContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>int</c>
	/// labeled alternative in <see cref="LangXParser.expression3"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInt([NotNull] LangXParser.IntContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>float</c>
	/// labeled alternative in <see cref="LangXParser.expression3"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFloat([NotNull] LangXParser.FloatContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>float</c>
	/// labeled alternative in <see cref="LangXParser.expression3"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFloat([NotNull] LangXParser.FloatContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>idIntFloat</c>
	/// labeled alternative in <see cref="LangXParser.expression3"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdIntFloat([NotNull] LangXParser.IdIntFloatContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>idIntFloat</c>
	/// labeled alternative in <see cref="LangXParser.expression3"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdIntFloat([NotNull] LangXParser.IdIntFloatContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>expressionInParens</c>
	/// labeled alternative in <see cref="LangXParser.expression3"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpressionInParens([NotNull] LangXParser.ExpressionInParensContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expressionInParens</c>
	/// labeled alternative in <see cref="LangXParser.expression3"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpressionInParens([NotNull] LangXParser.ExpressionInParensContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>addString</c>
	/// labeled alternative in <see cref="LangXParser.stringExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAddString([NotNull] LangXParser.AddStringContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>addString</c>
	/// labeled alternative in <see cref="LangXParser.stringExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAddString([NotNull] LangXParser.AddStringContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>stringExpression1Empty</c>
	/// labeled alternative in <see cref="LangXParser.stringExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStringExpression1Empty([NotNull] LangXParser.StringExpression1EmptyContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>stringExpression1Empty</c>
	/// labeled alternative in <see cref="LangXParser.stringExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStringExpression1Empty([NotNull] LangXParser.StringExpression1EmptyContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>string</c>
	/// labeled alternative in <see cref="LangXParser.stringExpression1"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterString([NotNull] LangXParser.StringContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>string</c>
	/// labeled alternative in <see cref="LangXParser.stringExpression1"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitString([NotNull] LangXParser.StringContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>idString</c>
	/// labeled alternative in <see cref="LangXParser.stringExpression1"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdString([NotNull] LangXParser.IdStringContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>idString</c>
	/// labeled alternative in <see cref="LangXParser.stringExpression1"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdString([NotNull] LangXParser.IdStringContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>stringExpressionInParens</c>
	/// labeled alternative in <see cref="LangXParser.stringExpression1"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStringExpressionInParens([NotNull] LangXParser.StringExpressionInParensContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>stringExpressionInParens</c>
	/// labeled alternative in <see cref="LangXParser.stringExpression1"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStringExpressionInParens([NotNull] LangXParser.StringExpressionInParensContext context);
}
