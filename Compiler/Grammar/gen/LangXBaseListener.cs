//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from f:/GitHubRepository/CSharpCompiler/Compiler/Grammar/LangX.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="ILangXListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class LangXBaseListener : ILangXListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="LangXParser.start"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStart([NotNull] LangXParser.StartContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LangXParser.start"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStart([NotNull] LangXParser.StartContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LangXParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStatement([NotNull] LangXParser.StatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LangXParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStatement([NotNull] LangXParser.StatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LangXParser.read"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRead([NotNull] LangXParser.ReadContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LangXParser.read"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRead([NotNull] LangXParser.ReadContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LangXParser.write"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWrite([NotNull] LangXParser.WriteContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LangXParser.write"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWrite([NotNull] LangXParser.WriteContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>assignIntFloat</c>
	/// labeled alternative in <see cref="LangXParser.assign"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAssignIntFloat([NotNull] LangXParser.AssignIntFloatContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>assignIntFloat</c>
	/// labeled alternative in <see cref="LangXParser.assign"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAssignIntFloat([NotNull] LangXParser.AssignIntFloatContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>assignString</c>
	/// labeled alternative in <see cref="LangXParser.assign"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAssignString([NotNull] LangXParser.AssignStringContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>assignString</c>
	/// labeled alternative in <see cref="LangXParser.assign"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAssignString([NotNull] LangXParser.AssignStringContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>assignVar</c>
	/// labeled alternative in <see cref="LangXParser.assign"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAssignVar([NotNull] LangXParser.AssignVarContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>assignVar</c>
	/// labeled alternative in <see cref="LangXParser.assign"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAssignVar([NotNull] LangXParser.AssignVarContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>addIntFloat</c>
	/// labeled alternative in <see cref="LangXParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAddIntFloat([NotNull] LangXParser.AddIntFloatContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>addIntFloat</c>
	/// labeled alternative in <see cref="LangXParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAddIntFloat([NotNull] LangXParser.AddIntFloatContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>subIntFloat</c>
	/// labeled alternative in <see cref="LangXParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSubIntFloat([NotNull] LangXParser.SubIntFloatContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>subIntFloat</c>
	/// labeled alternative in <see cref="LangXParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSubIntFloat([NotNull] LangXParser.SubIntFloatContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>expression1Empty</c>
	/// labeled alternative in <see cref="LangXParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpression1Empty([NotNull] LangXParser.Expression1EmptyContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>expression1Empty</c>
	/// labeled alternative in <see cref="LangXParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpression1Empty([NotNull] LangXParser.Expression1EmptyContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>mulIntFloat</c>
	/// labeled alternative in <see cref="LangXParser.expression1"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMulIntFloat([NotNull] LangXParser.MulIntFloatContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>mulIntFloat</c>
	/// labeled alternative in <see cref="LangXParser.expression1"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMulIntFloat([NotNull] LangXParser.MulIntFloatContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>divIntFloat</c>
	/// labeled alternative in <see cref="LangXParser.expression1"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDivIntFloat([NotNull] LangXParser.DivIntFloatContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>divIntFloat</c>
	/// labeled alternative in <see cref="LangXParser.expression1"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDivIntFloat([NotNull] LangXParser.DivIntFloatContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>expression2Empty</c>
	/// labeled alternative in <see cref="LangXParser.expression1"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpression2Empty([NotNull] LangXParser.Expression2EmptyContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>expression2Empty</c>
	/// labeled alternative in <see cref="LangXParser.expression1"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpression2Empty([NotNull] LangXParser.Expression2EmptyContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>andIntFloat</c>
	/// labeled alternative in <see cref="LangXParser.expression2"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAndIntFloat([NotNull] LangXParser.AndIntFloatContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>andIntFloat</c>
	/// labeled alternative in <see cref="LangXParser.expression2"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAndIntFloat([NotNull] LangXParser.AndIntFloatContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>orIntFloat</c>
	/// labeled alternative in <see cref="LangXParser.expression2"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterOrIntFloat([NotNull] LangXParser.OrIntFloatContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>orIntFloat</c>
	/// labeled alternative in <see cref="LangXParser.expression2"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitOrIntFloat([NotNull] LangXParser.OrIntFloatContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>xorIntFloat</c>
	/// labeled alternative in <see cref="LangXParser.expression2"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterXorIntFloat([NotNull] LangXParser.XorIntFloatContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>xorIntFloat</c>
	/// labeled alternative in <see cref="LangXParser.expression2"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitXorIntFloat([NotNull] LangXParser.XorIntFloatContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>negIntFloat</c>
	/// labeled alternative in <see cref="LangXParser.expression2"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNegIntFloat([NotNull] LangXParser.NegIntFloatContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>negIntFloat</c>
	/// labeled alternative in <see cref="LangXParser.expression2"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNegIntFloat([NotNull] LangXParser.NegIntFloatContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>expression4Empty</c>
	/// labeled alternative in <see cref="LangXParser.expression2"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpression4Empty([NotNull] LangXParser.Expression4EmptyContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>expression4Empty</c>
	/// labeled alternative in <see cref="LangXParser.expression2"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpression4Empty([NotNull] LangXParser.Expression4EmptyContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>int</c>
	/// labeled alternative in <see cref="LangXParser.expression3"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInt([NotNull] LangXParser.IntContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>int</c>
	/// labeled alternative in <see cref="LangXParser.expression3"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInt([NotNull] LangXParser.IntContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>float</c>
	/// labeled alternative in <see cref="LangXParser.expression3"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFloat([NotNull] LangXParser.FloatContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>float</c>
	/// labeled alternative in <see cref="LangXParser.expression3"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFloat([NotNull] LangXParser.FloatContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>idIntFloat</c>
	/// labeled alternative in <see cref="LangXParser.expression3"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIdIntFloat([NotNull] LangXParser.IdIntFloatContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>idIntFloat</c>
	/// labeled alternative in <see cref="LangXParser.expression3"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIdIntFloat([NotNull] LangXParser.IdIntFloatContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>expressionInParens</c>
	/// labeled alternative in <see cref="LangXParser.expression3"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpressionInParens([NotNull] LangXParser.ExpressionInParensContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>expressionInParens</c>
	/// labeled alternative in <see cref="LangXParser.expression3"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpressionInParens([NotNull] LangXParser.ExpressionInParensContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>addString</c>
	/// labeled alternative in <see cref="LangXParser.stringExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAddString([NotNull] LangXParser.AddStringContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>addString</c>
	/// labeled alternative in <see cref="LangXParser.stringExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAddString([NotNull] LangXParser.AddStringContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>stringExpression1Empty</c>
	/// labeled alternative in <see cref="LangXParser.stringExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStringExpression1Empty([NotNull] LangXParser.StringExpression1EmptyContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>stringExpression1Empty</c>
	/// labeled alternative in <see cref="LangXParser.stringExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStringExpression1Empty([NotNull] LangXParser.StringExpression1EmptyContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>string</c>
	/// labeled alternative in <see cref="LangXParser.stringExpression1"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterString([NotNull] LangXParser.StringContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>string</c>
	/// labeled alternative in <see cref="LangXParser.stringExpression1"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitString([NotNull] LangXParser.StringContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>idString</c>
	/// labeled alternative in <see cref="LangXParser.stringExpression1"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIdString([NotNull] LangXParser.IdStringContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>idString</c>
	/// labeled alternative in <see cref="LangXParser.stringExpression1"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIdString([NotNull] LangXParser.IdStringContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>stringExpressionInParens</c>
	/// labeled alternative in <see cref="LangXParser.stringExpression1"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStringExpressionInParens([NotNull] LangXParser.StringExpressionInParensContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>stringExpressionInParens</c>
	/// labeled alternative in <see cref="LangXParser.stringExpression1"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStringExpressionInParens([NotNull] LangXParser.StringExpressionInParensContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
