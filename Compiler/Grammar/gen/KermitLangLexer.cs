//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/jakub/Documents/CSharpCompiler/Compiler/Grammar/KermitLang.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class KermitLangLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, INTEGER=12, REAL=13, BOOL=14, STRING=15, NUMBER=16, 
		INTEGER_NAME=17, REAL_NAME=18, BOOL_NAME=19, STRING_NAME=20, NUMBER_NAME=21, 
		ID=22, ADD=23, SUB=24, MUL=25, DIV=26, COMMENT=27, WS=28;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "INTEGER", "REAL", "BOOL", "STRING", "NUMBER", "INTEGER_NAME", 
		"REAL_NAME", "BOOL_NAME", "STRING_NAME", "NUMBER_NAME", "ID", "ADD", "SUB", 
		"MUL", "DIV", "COMMENT", "WS"
	};


	public KermitLangLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public KermitLangLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'DECLARE'", "';'", "'ASSIGN'", "'PRINT'", "'READ_TO'", "'AND'", 
		"'OR'", "'XOR'", "'NEG'", "'('", "')'", null, null, null, null, null, 
		"'INTEGER'", "'REAL'", "'BOOL'", "'STRING'", "'NUMBER'", null, "'+'", 
		"'-'", "'*'", "'/'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"INTEGER", "REAL", "BOOL", "STRING", "NUMBER", "INTEGER_NAME", "REAL_NAME", 
		"BOOL_NAME", "STRING_NAME", "NUMBER_NAME", "ID", "ADD", "SUB", "MUL", 
		"DIV", "COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "KermitLang.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static KermitLangLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,28,229,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,1,0,1,
		0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,
		1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,
		6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,11,4,11,109,
		8,11,11,11,12,11,110,1,12,4,12,114,8,12,11,12,12,12,115,1,12,1,12,4,12,
		120,8,12,11,12,12,12,121,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
		3,13,133,8,13,1,14,1,14,1,14,1,14,5,14,139,8,14,10,14,12,14,142,9,14,1,
		14,1,14,1,15,4,15,147,8,15,11,15,12,15,148,1,15,1,15,4,15,153,8,15,11,
		15,12,15,154,3,15,157,8,15,1,15,1,15,3,15,161,8,15,1,15,4,15,164,8,15,
		11,15,12,15,165,3,15,168,8,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
		1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,
		1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,21,4,21,203,8,21,11,
		21,12,21,204,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,
		26,5,26,219,8,26,10,26,12,26,222,9,26,1,26,1,26,1,27,1,27,1,27,1,27,0,
		0,28,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
		14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,
		26,53,27,55,28,1,0,6,3,0,10,10,13,13,34,34,2,0,69,69,101,101,2,0,43,43,
		45,45,2,0,95,95,97,122,2,0,10,10,13,13,3,0,9,10,13,13,32,32,242,0,1,1,
		0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
		1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,
		0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,
		1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,
		0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,1,57,
		1,0,0,0,3,65,1,0,0,0,5,67,1,0,0,0,7,74,1,0,0,0,9,80,1,0,0,0,11,88,1,0,
		0,0,13,92,1,0,0,0,15,95,1,0,0,0,17,99,1,0,0,0,19,103,1,0,0,0,21,105,1,
		0,0,0,23,108,1,0,0,0,25,113,1,0,0,0,27,132,1,0,0,0,29,134,1,0,0,0,31,146,
		1,0,0,0,33,169,1,0,0,0,35,177,1,0,0,0,37,182,1,0,0,0,39,187,1,0,0,0,41,
		194,1,0,0,0,43,202,1,0,0,0,45,206,1,0,0,0,47,208,1,0,0,0,49,210,1,0,0,
		0,51,212,1,0,0,0,53,214,1,0,0,0,55,225,1,0,0,0,57,58,5,68,0,0,58,59,5,
		69,0,0,59,60,5,67,0,0,60,61,5,76,0,0,61,62,5,65,0,0,62,63,5,82,0,0,63,
		64,5,69,0,0,64,2,1,0,0,0,65,66,5,59,0,0,66,4,1,0,0,0,67,68,5,65,0,0,68,
		69,5,83,0,0,69,70,5,83,0,0,70,71,5,73,0,0,71,72,5,71,0,0,72,73,5,78,0,
		0,73,6,1,0,0,0,74,75,5,80,0,0,75,76,5,82,0,0,76,77,5,73,0,0,77,78,5,78,
		0,0,78,79,5,84,0,0,79,8,1,0,0,0,80,81,5,82,0,0,81,82,5,69,0,0,82,83,5,
		65,0,0,83,84,5,68,0,0,84,85,5,95,0,0,85,86,5,84,0,0,86,87,5,79,0,0,87,
		10,1,0,0,0,88,89,5,65,0,0,89,90,5,78,0,0,90,91,5,68,0,0,91,12,1,0,0,0,
		92,93,5,79,0,0,93,94,5,82,0,0,94,14,1,0,0,0,95,96,5,88,0,0,96,97,5,79,
		0,0,97,98,5,82,0,0,98,16,1,0,0,0,99,100,5,78,0,0,100,101,5,69,0,0,101,
		102,5,71,0,0,102,18,1,0,0,0,103,104,5,40,0,0,104,20,1,0,0,0,105,106,5,
		41,0,0,106,22,1,0,0,0,107,109,2,48,57,0,108,107,1,0,0,0,109,110,1,0,0,
		0,110,108,1,0,0,0,110,111,1,0,0,0,111,24,1,0,0,0,112,114,2,48,57,0,113,
		112,1,0,0,0,114,115,1,0,0,0,115,113,1,0,0,0,115,116,1,0,0,0,116,117,1,
		0,0,0,117,119,5,46,0,0,118,120,2,48,57,0,119,118,1,0,0,0,120,121,1,0,0,
		0,121,119,1,0,0,0,121,122,1,0,0,0,122,26,1,0,0,0,123,124,5,116,0,0,124,
		125,5,114,0,0,125,126,5,117,0,0,126,133,5,101,0,0,127,128,5,102,0,0,128,
		129,5,97,0,0,129,130,5,108,0,0,130,131,5,115,0,0,131,133,5,101,0,0,132,
		123,1,0,0,0,132,127,1,0,0,0,133,28,1,0,0,0,134,140,5,34,0,0,135,139,8,
		0,0,0,136,137,5,34,0,0,137,139,5,34,0,0,138,135,1,0,0,0,138,136,1,0,0,
		0,139,142,1,0,0,0,140,138,1,0,0,0,140,141,1,0,0,0,141,143,1,0,0,0,142,
		140,1,0,0,0,143,144,5,34,0,0,144,30,1,0,0,0,145,147,2,48,57,0,146,145,
		1,0,0,0,147,148,1,0,0,0,148,146,1,0,0,0,148,149,1,0,0,0,149,156,1,0,0,
		0,150,152,5,46,0,0,151,153,2,48,57,0,152,151,1,0,0,0,153,154,1,0,0,0,154,
		152,1,0,0,0,154,155,1,0,0,0,155,157,1,0,0,0,156,150,1,0,0,0,156,157,1,
		0,0,0,157,167,1,0,0,0,158,160,7,1,0,0,159,161,7,2,0,0,160,159,1,0,0,0,
		160,161,1,0,0,0,161,163,1,0,0,0,162,164,2,48,57,0,163,162,1,0,0,0,164,
		165,1,0,0,0,165,163,1,0,0,0,165,166,1,0,0,0,166,168,1,0,0,0,167,158,1,
		0,0,0,167,168,1,0,0,0,168,32,1,0,0,0,169,170,5,73,0,0,170,171,5,78,0,0,
		171,172,5,84,0,0,172,173,5,69,0,0,173,174,5,71,0,0,174,175,5,69,0,0,175,
		176,5,82,0,0,176,34,1,0,0,0,177,178,5,82,0,0,178,179,5,69,0,0,179,180,
		5,65,0,0,180,181,5,76,0,0,181,36,1,0,0,0,182,183,5,66,0,0,183,184,5,79,
		0,0,184,185,5,79,0,0,185,186,5,76,0,0,186,38,1,0,0,0,187,188,5,83,0,0,
		188,189,5,84,0,0,189,190,5,82,0,0,190,191,5,73,0,0,191,192,5,78,0,0,192,
		193,5,71,0,0,193,40,1,0,0,0,194,195,5,78,0,0,195,196,5,85,0,0,196,197,
		5,77,0,0,197,198,5,66,0,0,198,199,5,69,0,0,199,200,5,82,0,0,200,42,1,0,
		0,0,201,203,7,3,0,0,202,201,1,0,0,0,203,204,1,0,0,0,204,202,1,0,0,0,204,
		205,1,0,0,0,205,44,1,0,0,0,206,207,5,43,0,0,207,46,1,0,0,0,208,209,5,45,
		0,0,209,48,1,0,0,0,210,211,5,42,0,0,211,50,1,0,0,0,212,213,5,47,0,0,213,
		52,1,0,0,0,214,215,5,47,0,0,215,216,5,47,0,0,216,220,1,0,0,0,217,219,8,
		4,0,0,218,217,1,0,0,0,219,222,1,0,0,0,220,218,1,0,0,0,220,221,1,0,0,0,
		221,223,1,0,0,0,222,220,1,0,0,0,223,224,6,26,0,0,224,54,1,0,0,0,225,226,
		7,5,0,0,226,227,1,0,0,0,227,228,6,27,0,0,228,56,1,0,0,0,15,0,110,115,121,
		132,138,140,148,154,156,160,165,167,204,220,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
