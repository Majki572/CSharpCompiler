//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from f:/GitHubRepository/CSharpCompiler/Compiler/Grammar/KermitLang.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class KermitLangLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, NUMBER=8, BOOL=9, 
		STRING=10, SHORT_NAME=11, INTEGER_NAME=12, LONG_NAME=13, FLOAT_NAME=14, 
		DOUBLE_NAME=15, REAL_NAME=16, BOOL_NAME=17, PRINT=18, READ=19, IF=20, 
		ELSE=21, WHILE=22, STRING_NAME=23, NUMBER_NAME=24, ID=25, ADD=26, SUB=27, 
		MUL=28, DIV=29, L_PAR=30, P_PAR=31, L_CURL=32, P_CURL=33, COMMENT=34, 
		WS=35;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "NUMBER", "BOOL", 
		"STRING", "SHORT_NAME", "INTEGER_NAME", "LONG_NAME", "FLOAT_NAME", "DOUBLE_NAME", 
		"REAL_NAME", "BOOL_NAME", "PRINT", "READ", "IF", "ELSE", "WHILE", "STRING_NAME", 
		"NUMBER_NAME", "ID", "ADD", "SUB", "MUL", "DIV", "L_PAR", "P_PAR", "L_CURL", 
		"P_CURL", "COMMENT", "WS"
	};


	public KermitLangLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public KermitLangLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "';'", "'='", "'AND'", "'OR'", "'XOR'", "'NEG'", "','", null, null, 
		null, "'short'", "'int'", "'long'", "'float'", "'double'", "'real'", "'bool'", 
		"'print'", "'read'", "'if'", "'else'", "'while'", "'STRING'", "'NUMBER'", 
		null, "'+'", "'-'", "'*'", "'/'", "'('", "')'", "'{'", "'}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, "NUMBER", "BOOL", "STRING", 
		"SHORT_NAME", "INTEGER_NAME", "LONG_NAME", "FLOAT_NAME", "DOUBLE_NAME", 
		"REAL_NAME", "BOOL_NAME", "PRINT", "READ", "IF", "ELSE", "WHILE", "STRING_NAME", 
		"NUMBER_NAME", "ID", "ADD", "SUB", "MUL", "DIV", "L_PAR", "P_PAR", "L_CURL", 
		"P_CURL", "COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "KermitLang.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static KermitLangLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,35,240,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,1,0,1,
		0,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,
		1,6,1,6,1,7,4,7,94,8,7,11,7,12,7,95,1,7,1,7,4,7,100,8,7,11,7,12,7,101,
		3,7,104,8,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,115,8,8,1,9,1,9,1,
		9,1,9,5,9,121,8,9,10,9,12,9,124,9,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,
		10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,
		13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,
		16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,
		18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,
		21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,
		23,1,23,1,24,4,24,206,8,24,11,24,12,24,207,1,25,1,25,1,26,1,26,1,27,1,
		27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,33,1,
		33,5,33,230,8,33,10,33,12,33,233,9,33,1,33,1,33,1,34,1,34,1,34,1,34,0,
		0,35,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
		14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,
		26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,1,0,4,3,0,10,
		10,13,13,34,34,2,0,95,95,97,122,2,0,10,10,13,13,3,0,9,10,13,13,32,32,247,
		0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,
		0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
		1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,
		0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,
		1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,
		0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,
		1,0,0,0,0,69,1,0,0,0,1,71,1,0,0,0,3,73,1,0,0,0,5,75,1,0,0,0,7,79,1,0,0,
		0,9,82,1,0,0,0,11,86,1,0,0,0,13,90,1,0,0,0,15,93,1,0,0,0,17,114,1,0,0,
		0,19,116,1,0,0,0,21,127,1,0,0,0,23,133,1,0,0,0,25,137,1,0,0,0,27,142,1,
		0,0,0,29,148,1,0,0,0,31,155,1,0,0,0,33,160,1,0,0,0,35,165,1,0,0,0,37,171,
		1,0,0,0,39,176,1,0,0,0,41,179,1,0,0,0,43,184,1,0,0,0,45,190,1,0,0,0,47,
		197,1,0,0,0,49,205,1,0,0,0,51,209,1,0,0,0,53,211,1,0,0,0,55,213,1,0,0,
		0,57,215,1,0,0,0,59,217,1,0,0,0,61,219,1,0,0,0,63,221,1,0,0,0,65,223,1,
		0,0,0,67,225,1,0,0,0,69,236,1,0,0,0,71,72,5,59,0,0,72,2,1,0,0,0,73,74,
		5,61,0,0,74,4,1,0,0,0,75,76,5,65,0,0,76,77,5,78,0,0,77,78,5,68,0,0,78,
		6,1,0,0,0,79,80,5,79,0,0,80,81,5,82,0,0,81,8,1,0,0,0,82,83,5,88,0,0,83,
		84,5,79,0,0,84,85,5,82,0,0,85,10,1,0,0,0,86,87,5,78,0,0,87,88,5,69,0,0,
		88,89,5,71,0,0,89,12,1,0,0,0,90,91,5,44,0,0,91,14,1,0,0,0,92,94,2,48,57,
		0,93,92,1,0,0,0,94,95,1,0,0,0,95,93,1,0,0,0,95,96,1,0,0,0,96,103,1,0,0,
		0,97,99,5,46,0,0,98,100,2,48,57,0,99,98,1,0,0,0,100,101,1,0,0,0,101,99,
		1,0,0,0,101,102,1,0,0,0,102,104,1,0,0,0,103,97,1,0,0,0,103,104,1,0,0,0,
		104,16,1,0,0,0,105,106,5,116,0,0,106,107,5,114,0,0,107,108,5,117,0,0,108,
		115,5,101,0,0,109,110,5,102,0,0,110,111,5,97,0,0,111,112,5,108,0,0,112,
		113,5,115,0,0,113,115,5,101,0,0,114,105,1,0,0,0,114,109,1,0,0,0,115,18,
		1,0,0,0,116,122,5,34,0,0,117,121,8,0,0,0,118,119,5,34,0,0,119,121,5,34,
		0,0,120,117,1,0,0,0,120,118,1,0,0,0,121,124,1,0,0,0,122,120,1,0,0,0,122,
		123,1,0,0,0,123,125,1,0,0,0,124,122,1,0,0,0,125,126,5,34,0,0,126,20,1,
		0,0,0,127,128,5,115,0,0,128,129,5,104,0,0,129,130,5,111,0,0,130,131,5,
		114,0,0,131,132,5,116,0,0,132,22,1,0,0,0,133,134,5,105,0,0,134,135,5,110,
		0,0,135,136,5,116,0,0,136,24,1,0,0,0,137,138,5,108,0,0,138,139,5,111,0,
		0,139,140,5,110,0,0,140,141,5,103,0,0,141,26,1,0,0,0,142,143,5,102,0,0,
		143,144,5,108,0,0,144,145,5,111,0,0,145,146,5,97,0,0,146,147,5,116,0,0,
		147,28,1,0,0,0,148,149,5,100,0,0,149,150,5,111,0,0,150,151,5,117,0,0,151,
		152,5,98,0,0,152,153,5,108,0,0,153,154,5,101,0,0,154,30,1,0,0,0,155,156,
		5,114,0,0,156,157,5,101,0,0,157,158,5,97,0,0,158,159,5,108,0,0,159,32,
		1,0,0,0,160,161,5,98,0,0,161,162,5,111,0,0,162,163,5,111,0,0,163,164,5,
		108,0,0,164,34,1,0,0,0,165,166,5,112,0,0,166,167,5,114,0,0,167,168,5,105,
		0,0,168,169,5,110,0,0,169,170,5,116,0,0,170,36,1,0,0,0,171,172,5,114,0,
		0,172,173,5,101,0,0,173,174,5,97,0,0,174,175,5,100,0,0,175,38,1,0,0,0,
		176,177,5,105,0,0,177,178,5,102,0,0,178,40,1,0,0,0,179,180,5,101,0,0,180,
		181,5,108,0,0,181,182,5,115,0,0,182,183,5,101,0,0,183,42,1,0,0,0,184,185,
		5,119,0,0,185,186,5,104,0,0,186,187,5,105,0,0,187,188,5,108,0,0,188,189,
		5,101,0,0,189,44,1,0,0,0,190,191,5,83,0,0,191,192,5,84,0,0,192,193,5,82,
		0,0,193,194,5,73,0,0,194,195,5,78,0,0,195,196,5,71,0,0,196,46,1,0,0,0,
		197,198,5,78,0,0,198,199,5,85,0,0,199,200,5,77,0,0,200,201,5,66,0,0,201,
		202,5,69,0,0,202,203,5,82,0,0,203,48,1,0,0,0,204,206,7,1,0,0,205,204,1,
		0,0,0,206,207,1,0,0,0,207,205,1,0,0,0,207,208,1,0,0,0,208,50,1,0,0,0,209,
		210,5,43,0,0,210,52,1,0,0,0,211,212,5,45,0,0,212,54,1,0,0,0,213,214,5,
		42,0,0,214,56,1,0,0,0,215,216,5,47,0,0,216,58,1,0,0,0,217,218,5,40,0,0,
		218,60,1,0,0,0,219,220,5,41,0,0,220,62,1,0,0,0,221,222,5,123,0,0,222,64,
		1,0,0,0,223,224,5,125,0,0,224,66,1,0,0,0,225,226,5,47,0,0,226,227,5,47,
		0,0,227,231,1,0,0,0,228,230,8,2,0,0,229,228,1,0,0,0,230,233,1,0,0,0,231,
		229,1,0,0,0,231,232,1,0,0,0,232,234,1,0,0,0,233,231,1,0,0,0,234,235,6,
		33,0,0,235,68,1,0,0,0,236,237,7,3,0,0,237,238,1,0,0,0,238,239,6,34,0,0,
		239,70,1,0,0,0,9,0,95,101,103,114,120,122,207,231,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
