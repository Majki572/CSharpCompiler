//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from f:/GitHubRepository/CSharpCompiler/Compiler/Grammar/LangX.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class LangXParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, INT_TYPE=5, FLOAT_TYPE=6, DOUBLE_TYPE=7, 
		STRING_TYPE=8, READ=9, WRITE=10, STRING=11, ID=12, INT=13, FLOAT=14, AND=15, 
		OR=16, XOR=17, NEG=18, ADD=19, SUB=20, MUL=21, DIV=22, NEWLINE=23, WS=24;
	public const int
		RULE_start = 0, RULE_statement = 1, RULE_read = 2, RULE_write = 3, RULE_assign = 4, 
		RULE_expression = 5, RULE_expression1 = 6, RULE_expression2 = 7, RULE_expression3 = 8, 
		RULE_stringExpression = 9, RULE_stringExpression1 = 10;
	public static readonly string[] ruleNames = {
		"start", "statement", "read", "write", "assign", "expression", "expression1", 
		"expression2", "expression3", "stringExpression", "stringExpression1"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'='", "'('", "')'", "'int'", "'float'", "'double'", "'string'", 
		"'read'", "'write'", null, null, null, null, "'&&'", "'||'", "'^'", "'!'", 
		"'+'", "'-'", "'*'", "'/'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, "INT_TYPE", "FLOAT_TYPE", "DOUBLE_TYPE", 
		"STRING_TYPE", "READ", "WRITE", "STRING", "ID", "INT", "FLOAT", "AND", 
		"OR", "XOR", "NEG", "ADD", "SUB", "MUL", "DIV", "NEWLINE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LangX.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LangXParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LangXParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LangXParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(LangXParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangXListener typedListener = listener as ILangXListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangXListener typedListener = listener as ILangXListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 25;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 5984L) != 0)) {
				{
				{
				State = 22;
				statement();
				}
				}
				State = 27;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 28;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(LangXParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignContext assign() {
			return GetRuleContext<AssignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReadContext read() {
			return GetRuleContext<ReadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WriteContext write() {
			return GetRuleContext<WriteContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(LangXParser.Eof, 0); }
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangXListener typedListener = listener as ILangXListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangXListener typedListener = listener as ILangXListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 46;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 33;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case INT_TYPE:
				case FLOAT_TYPE:
				case STRING_TYPE:
				case ID:
					{
					State = 30;
					assign();
					}
					break;
				case READ:
					{
					State = 31;
					read();
					}
					break;
				case WRITE:
					{
					State = 32;
					write();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 35;
				Match(T__0);
				State = 36;
				Match(NEWLINE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 41;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case INT_TYPE:
				case FLOAT_TYPE:
				case STRING_TYPE:
				case ID:
					{
					State = 38;
					assign();
					}
					break;
				case READ:
					{
					State = 39;
					read();
					}
					break;
				case WRITE:
					{
					State = 40;
					write();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 43;
				Match(T__0);
				State = 44;
				Match(Eof);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(LangXParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LangXParser.ID, 0); }
		public ReadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_read; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangXListener typedListener = listener as ILangXListener;
			if (typedListener != null) typedListener.EnterRead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangXListener typedListener = listener as ILangXListener;
			if (typedListener != null) typedListener.ExitRead(this);
		}
	}

	[RuleVersion(0)]
	public ReadContext read() {
		ReadContext _localctx = new ReadContext(Context, State);
		EnterRule(_localctx, 4, RULE_read);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48;
			Match(READ);
			State = 49;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WriteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE() { return GetToken(LangXParser.WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExpressionContext stringExpression() {
			return GetRuleContext<StringExpressionContext>(0);
		}
		public WriteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_write; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangXListener typedListener = listener as ILangXListener;
			if (typedListener != null) typedListener.EnterWrite(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangXListener typedListener = listener as ILangXListener;
			if (typedListener != null) typedListener.ExitWrite(this);
		}
	}

	[RuleVersion(0)]
	public WriteContext write() {
		WriteContext _localctx = new WriteContext(Context, State);
		EnterRule(_localctx, 6, RULE_write);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			Match(WRITE);
			State = 54;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 52;
				expression();
				}
				break;
			case 2:
				{
				State = 53;
				stringExpression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignContext : ParserRuleContext {
		public AssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign; } }
	 
		public AssignContext() { }
		public virtual void CopyFrom(AssignContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AssignVarContext : AssignContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LangXParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExpressionContext stringExpression() {
			return GetRuleContext<StringExpressionContext>(0);
		}
		public AssignVarContext(AssignContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangXListener typedListener = listener as ILangXListener;
			if (typedListener != null) typedListener.EnterAssignVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangXListener typedListener = listener as ILangXListener;
			if (typedListener != null) typedListener.ExitAssignVar(this);
		}
	}
	public partial class AssignIntFloatContext : AssignContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LangXParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_TYPE() { return GetToken(LangXParser.INT_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_TYPE() { return GetToken(LangXParser.FLOAT_TYPE, 0); }
		public AssignIntFloatContext(AssignContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangXListener typedListener = listener as ILangXListener;
			if (typedListener != null) typedListener.EnterAssignIntFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangXListener typedListener = listener as ILangXListener;
			if (typedListener != null) typedListener.ExitAssignIntFloat(this);
		}
	}
	public partial class AssignStringContext : AssignContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_TYPE() { return GetToken(LangXParser.STRING_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LangXParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringExpressionContext stringExpression() {
			return GetRuleContext<StringExpressionContext>(0);
		}
		public AssignStringContext(AssignContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangXListener typedListener = listener as ILangXListener;
			if (typedListener != null) typedListener.EnterAssignString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangXListener typedListener = listener as ILangXListener;
			if (typedListener != null) typedListener.ExitAssignString(this);
		}
	}

	[RuleVersion(0)]
	public AssignContext assign() {
		AssignContext _localctx = new AssignContext(Context, State);
		EnterRule(_localctx, 8, RULE_assign);
		int _la;
		try {
			State = 70;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT_TYPE:
			case FLOAT_TYPE:
				_localctx = new AssignIntFloatContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 56;
				_la = TokenStream.LA(1);
				if ( !(_la==INT_TYPE || _la==FLOAT_TYPE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 57;
				Match(ID);
				State = 58;
				Match(T__1);
				State = 59;
				expression();
				}
				break;
			case STRING_TYPE:
				_localctx = new AssignStringContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 60;
				Match(STRING_TYPE);
				State = 61;
				Match(ID);
				State = 62;
				Match(T__1);
				State = 63;
				stringExpression();
				}
				break;
			case ID:
				_localctx = new AssignVarContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 64;
				Match(ID);
				State = 65;
				Match(T__1);
				State = 68;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
				case 1:
					{
					State = 66;
					expression();
					}
					break;
				case 2:
					{
					State = 67;
					stringExpression();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Expression1EmptyContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expression1Context expression1() {
			return GetRuleContext<Expression1Context>(0);
		}
		public Expression1EmptyContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangXListener typedListener = listener as ILangXListener;
			if (typedListener != null) typedListener.EnterExpression1Empty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangXListener typedListener = listener as ILangXListener;
			if (typedListener != null) typedListener.ExitExpression1Empty(this);
		}
	}
	public partial class AddIntFloatContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expression1Context expression1() {
			return GetRuleContext<Expression1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(LangXParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AddIntFloatContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangXListener typedListener = listener as ILangXListener;
			if (typedListener != null) typedListener.EnterAddIntFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangXListener typedListener = listener as ILangXListener;
			if (typedListener != null) typedListener.ExitAddIntFloat(this);
		}
	}
	public partial class SubIntFloatContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expression1Context expression1() {
			return GetRuleContext<Expression1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(LangXParser.SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SubIntFloatContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangXListener typedListener = listener as ILangXListener;
			if (typedListener != null) typedListener.EnterSubIntFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangXListener typedListener = listener as ILangXListener;
			if (typedListener != null) typedListener.ExitSubIntFloat(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 10, RULE_expression);
		try {
			State = 81;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				_localctx = new AddIntFloatContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 72;
				expression1();
				State = 73;
				Match(ADD);
				State = 74;
				expression();
				}
				break;
			case 2:
				_localctx = new SubIntFloatContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 76;
				expression1();
				State = 77;
				Match(SUB);
				State = 78;
				expression();
				}
				break;
			case 3:
				_localctx = new Expression1EmptyContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 80;
				expression1();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression1Context : ParserRuleContext {
		public Expression1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression1; } }
	 
		public Expression1Context() { }
		public virtual void CopyFrom(Expression1Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class MulIntFloatContext : Expression1Context {
		[System.Diagnostics.DebuggerNonUserCode] public Expression2Context expression2() {
			return GetRuleContext<Expression2Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(LangXParser.MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expression1Context expression1() {
			return GetRuleContext<Expression1Context>(0);
		}
		public MulIntFloatContext(Expression1Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangXListener typedListener = listener as ILangXListener;
			if (typedListener != null) typedListener.EnterMulIntFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangXListener typedListener = listener as ILangXListener;
			if (typedListener != null) typedListener.ExitMulIntFloat(this);
		}
	}
	public partial class Expression2EmptyContext : Expression1Context {
		[System.Diagnostics.DebuggerNonUserCode] public Expression2Context expression2() {
			return GetRuleContext<Expression2Context>(0);
		}
		public Expression2EmptyContext(Expression1Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangXListener typedListener = listener as ILangXListener;
			if (typedListener != null) typedListener.EnterExpression2Empty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangXListener typedListener = listener as ILangXListener;
			if (typedListener != null) typedListener.ExitExpression2Empty(this);
		}
	}
	public partial class DivIntFloatContext : Expression1Context {
		[System.Diagnostics.DebuggerNonUserCode] public Expression2Context expression2() {
			return GetRuleContext<Expression2Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(LangXParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expression1Context expression1() {
			return GetRuleContext<Expression1Context>(0);
		}
		public DivIntFloatContext(Expression1Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangXListener typedListener = listener as ILangXListener;
			if (typedListener != null) typedListener.EnterDivIntFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangXListener typedListener = listener as ILangXListener;
			if (typedListener != null) typedListener.ExitDivIntFloat(this);
		}
	}

	[RuleVersion(0)]
	public Expression1Context expression1() {
		Expression1Context _localctx = new Expression1Context(Context, State);
		EnterRule(_localctx, 12, RULE_expression1);
		try {
			State = 92;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				_localctx = new MulIntFloatContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 83;
				expression2();
				State = 84;
				Match(MUL);
				State = 85;
				expression1();
				}
				break;
			case 2:
				_localctx = new DivIntFloatContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 87;
				expression2();
				State = 88;
				Match(DIV);
				State = 89;
				expression1();
				}
				break;
			case 3:
				_localctx = new Expression2EmptyContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 91;
				expression2();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression2Context : ParserRuleContext {
		public Expression2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression2; } }
	 
		public Expression2Context() { }
		public virtual void CopyFrom(Expression2Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class AndIntFloatContext : Expression2Context {
		[System.Diagnostics.DebuggerNonUserCode] public Expression3Context expression3() {
			return GetRuleContext<Expression3Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(LangXParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expression2Context expression2() {
			return GetRuleContext<Expression2Context>(0);
		}
		public AndIntFloatContext(Expression2Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangXListener typedListener = listener as ILangXListener;
			if (typedListener != null) typedListener.EnterAndIntFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangXListener typedListener = listener as ILangXListener;
			if (typedListener != null) typedListener.ExitAndIntFloat(this);
		}
	}
	public partial class OrIntFloatContext : Expression2Context {
		[System.Diagnostics.DebuggerNonUserCode] public Expression3Context expression3() {
			return GetRuleContext<Expression3Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(LangXParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expression2Context expression2() {
			return GetRuleContext<Expression2Context>(0);
		}
		public OrIntFloatContext(Expression2Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangXListener typedListener = listener as ILangXListener;
			if (typedListener != null) typedListener.EnterOrIntFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangXListener typedListener = listener as ILangXListener;
			if (typedListener != null) typedListener.ExitOrIntFloat(this);
		}
	}
	public partial class NegIntFloatContext : Expression2Context {
		[System.Diagnostics.DebuggerNonUserCode] public Expression3Context expression3() {
			return GetRuleContext<Expression3Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEG() { return GetToken(LangXParser.NEG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expression2Context expression2() {
			return GetRuleContext<Expression2Context>(0);
		}
		public NegIntFloatContext(Expression2Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangXListener typedListener = listener as ILangXListener;
			if (typedListener != null) typedListener.EnterNegIntFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangXListener typedListener = listener as ILangXListener;
			if (typedListener != null) typedListener.ExitNegIntFloat(this);
		}
	}
	public partial class Expression4EmptyContext : Expression2Context {
		[System.Diagnostics.DebuggerNonUserCode] public Expression3Context expression3() {
			return GetRuleContext<Expression3Context>(0);
		}
		public Expression4EmptyContext(Expression2Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangXListener typedListener = listener as ILangXListener;
			if (typedListener != null) typedListener.EnterExpression4Empty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangXListener typedListener = listener as ILangXListener;
			if (typedListener != null) typedListener.ExitExpression4Empty(this);
		}
	}
	public partial class XorIntFloatContext : Expression2Context {
		[System.Diagnostics.DebuggerNonUserCode] public Expression3Context expression3() {
			return GetRuleContext<Expression3Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR() { return GetToken(LangXParser.XOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expression2Context expression2() {
			return GetRuleContext<Expression2Context>(0);
		}
		public XorIntFloatContext(Expression2Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangXListener typedListener = listener as ILangXListener;
			if (typedListener != null) typedListener.EnterXorIntFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangXListener typedListener = listener as ILangXListener;
			if (typedListener != null) typedListener.ExitXorIntFloat(this);
		}
	}

	[RuleVersion(0)]
	public Expression2Context expression2() {
		Expression2Context _localctx = new Expression2Context(Context, State);
		EnterRule(_localctx, 14, RULE_expression2);
		try {
			State = 111;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				_localctx = new AndIntFloatContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 94;
				expression3();
				State = 95;
				Match(AND);
				State = 96;
				expression2();
				}
				break;
			case 2:
				_localctx = new OrIntFloatContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 98;
				expression3();
				State = 99;
				Match(OR);
				State = 100;
				expression2();
				}
				break;
			case 3:
				_localctx = new XorIntFloatContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 102;
				expression3();
				State = 103;
				Match(XOR);
				State = 104;
				expression2();
				}
				break;
			case 4:
				_localctx = new NegIntFloatContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 106;
				expression3();
				State = 107;
				Match(NEG);
				State = 108;
				expression2();
				}
				break;
			case 5:
				_localctx = new Expression4EmptyContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 110;
				expression3();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression3Context : ParserRuleContext {
		public Expression3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression3; } }
	 
		public Expression3Context() { }
		public virtual void CopyFrom(Expression3Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class IdIntFloatContext : Expression3Context {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LangXParser.ID, 0); }
		public IdIntFloatContext(Expression3Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangXListener typedListener = listener as ILangXListener;
			if (typedListener != null) typedListener.EnterIdIntFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangXListener typedListener = listener as ILangXListener;
			if (typedListener != null) typedListener.ExitIdIntFloat(this);
		}
	}
	public partial class ExpressionInParensContext : Expression3Context {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionInParensContext(Expression3Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangXListener typedListener = listener as ILangXListener;
			if (typedListener != null) typedListener.EnterExpressionInParens(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangXListener typedListener = listener as ILangXListener;
			if (typedListener != null) typedListener.ExitExpressionInParens(this);
		}
	}
	public partial class FloatContext : Expression3Context {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(LangXParser.FLOAT, 0); }
		public FloatContext(Expression3Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangXListener typedListener = listener as ILangXListener;
			if (typedListener != null) typedListener.EnterFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangXListener typedListener = listener as ILangXListener;
			if (typedListener != null) typedListener.ExitFloat(this);
		}
	}
	public partial class IntContext : Expression3Context {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(LangXParser.INT, 0); }
		public IntContext(Expression3Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangXListener typedListener = listener as ILangXListener;
			if (typedListener != null) typedListener.EnterInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangXListener typedListener = listener as ILangXListener;
			if (typedListener != null) typedListener.ExitInt(this);
		}
	}

	[RuleVersion(0)]
	public Expression3Context expression3() {
		Expression3Context _localctx = new Expression3Context(Context, State);
		EnterRule(_localctx, 16, RULE_expression3);
		try {
			State = 120;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
				_localctx = new IntContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 113;
				Match(INT);
				}
				break;
			case FLOAT:
				_localctx = new FloatContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 114;
				Match(FLOAT);
				}
				break;
			case ID:
				_localctx = new IdIntFloatContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 115;
				Match(ID);
				}
				break;
			case T__2:
				_localctx = new ExpressionInParensContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 116;
				Match(T__2);
				State = 117;
				expression();
				State = 118;
				Match(T__3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringExpressionContext : ParserRuleContext {
		public StringExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringExpression; } }
	 
		public StringExpressionContext() { }
		public virtual void CopyFrom(StringExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StringExpression1EmptyContext : StringExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExpression1Context stringExpression1() {
			return GetRuleContext<StringExpression1Context>(0);
		}
		public StringExpression1EmptyContext(StringExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangXListener typedListener = listener as ILangXListener;
			if (typedListener != null) typedListener.EnterStringExpression1Empty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangXListener typedListener = listener as ILangXListener;
			if (typedListener != null) typedListener.ExitStringExpression1Empty(this);
		}
	}
	public partial class AddStringContext : StringExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExpression1Context stringExpression1() {
			return GetRuleContext<StringExpression1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(LangXParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringExpressionContext stringExpression() {
			return GetRuleContext<StringExpressionContext>(0);
		}
		public AddStringContext(StringExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangXListener typedListener = listener as ILangXListener;
			if (typedListener != null) typedListener.EnterAddString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangXListener typedListener = listener as ILangXListener;
			if (typedListener != null) typedListener.ExitAddString(this);
		}
	}

	[RuleVersion(0)]
	public StringExpressionContext stringExpression() {
		StringExpressionContext _localctx = new StringExpressionContext(Context, State);
		EnterRule(_localctx, 18, RULE_stringExpression);
		try {
			State = 127;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				_localctx = new AddStringContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 122;
				stringExpression1();
				State = 123;
				Match(ADD);
				State = 124;
				stringExpression();
				}
				break;
			case 2:
				_localctx = new StringExpression1EmptyContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 126;
				stringExpression1();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringExpression1Context : ParserRuleContext {
		public StringExpression1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringExpression1; } }
	 
		public StringExpression1Context() { }
		public virtual void CopyFrom(StringExpression1Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class StringContext : StringExpression1Context {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(LangXParser.STRING, 0); }
		public StringContext(StringExpression1Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangXListener typedListener = listener as ILangXListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangXListener typedListener = listener as ILangXListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
	}
	public partial class StringExpressionInParensContext : StringExpression1Context {
		[System.Diagnostics.DebuggerNonUserCode] public StringExpressionContext stringExpression() {
			return GetRuleContext<StringExpressionContext>(0);
		}
		public StringExpressionInParensContext(StringExpression1Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangXListener typedListener = listener as ILangXListener;
			if (typedListener != null) typedListener.EnterStringExpressionInParens(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangXListener typedListener = listener as ILangXListener;
			if (typedListener != null) typedListener.ExitStringExpressionInParens(this);
		}
	}
	public partial class IdStringContext : StringExpression1Context {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LangXParser.ID, 0); }
		public IdStringContext(StringExpression1Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangXListener typedListener = listener as ILangXListener;
			if (typedListener != null) typedListener.EnterIdString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangXListener typedListener = listener as ILangXListener;
			if (typedListener != null) typedListener.ExitIdString(this);
		}
	}

	[RuleVersion(0)]
	public StringExpression1Context stringExpression1() {
		StringExpression1Context _localctx = new StringExpression1Context(Context, State);
		EnterRule(_localctx, 20, RULE_stringExpression1);
		try {
			State = 135;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				_localctx = new StringContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 129;
				Match(STRING);
				}
				break;
			case ID:
				_localctx = new IdStringContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 130;
				Match(ID);
				}
				break;
			case T__2:
				_localctx = new StringExpressionInParensContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 131;
				Match(T__2);
				State = 132;
				stringExpression();
				State = 133;
				Match(T__3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,24,138,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,1,0,5,0,24,8,0,10,0,12,0,27,9,0,1,0,1,0,
		1,1,1,1,1,1,3,1,34,8,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,42,8,1,1,1,1,1,1,1,
		3,1,47,8,1,1,2,1,2,1,2,1,3,1,3,1,3,3,3,55,8,3,1,4,1,4,1,4,1,4,1,4,1,4,
		1,4,1,4,1,4,1,4,1,4,1,4,3,4,69,8,4,3,4,71,8,4,1,5,1,5,1,5,1,5,1,5,1,5,
		1,5,1,5,1,5,3,5,82,8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,93,8,6,
		1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,
		7,112,8,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,121,8,8,1,9,1,9,1,9,1,9,1,9,
		3,9,128,8,9,1,10,1,10,1,10,1,10,1,10,1,10,3,10,136,8,10,1,10,0,0,11,0,
		2,4,6,8,10,12,14,16,18,20,0,1,1,0,5,6,150,0,25,1,0,0,0,2,46,1,0,0,0,4,
		48,1,0,0,0,6,51,1,0,0,0,8,70,1,0,0,0,10,81,1,0,0,0,12,92,1,0,0,0,14,111,
		1,0,0,0,16,120,1,0,0,0,18,127,1,0,0,0,20,135,1,0,0,0,22,24,3,2,1,0,23,
		22,1,0,0,0,24,27,1,0,0,0,25,23,1,0,0,0,25,26,1,0,0,0,26,28,1,0,0,0,27,
		25,1,0,0,0,28,29,5,0,0,1,29,1,1,0,0,0,30,34,3,8,4,0,31,34,3,4,2,0,32,34,
		3,6,3,0,33,30,1,0,0,0,33,31,1,0,0,0,33,32,1,0,0,0,34,35,1,0,0,0,35,36,
		5,1,0,0,36,37,5,23,0,0,37,47,1,0,0,0,38,42,3,8,4,0,39,42,3,4,2,0,40,42,
		3,6,3,0,41,38,1,0,0,0,41,39,1,0,0,0,41,40,1,0,0,0,42,43,1,0,0,0,43,44,
		5,1,0,0,44,45,5,0,0,1,45,47,1,0,0,0,46,33,1,0,0,0,46,41,1,0,0,0,47,3,1,
		0,0,0,48,49,5,9,0,0,49,50,5,12,0,0,50,5,1,0,0,0,51,54,5,10,0,0,52,55,3,
		10,5,0,53,55,3,18,9,0,54,52,1,0,0,0,54,53,1,0,0,0,55,7,1,0,0,0,56,57,7,
		0,0,0,57,58,5,12,0,0,58,59,5,2,0,0,59,71,3,10,5,0,60,61,5,8,0,0,61,62,
		5,12,0,0,62,63,5,2,0,0,63,71,3,18,9,0,64,65,5,12,0,0,65,68,5,2,0,0,66,
		69,3,10,5,0,67,69,3,18,9,0,68,66,1,0,0,0,68,67,1,0,0,0,69,71,1,0,0,0,70,
		56,1,0,0,0,70,60,1,0,0,0,70,64,1,0,0,0,71,9,1,0,0,0,72,73,3,12,6,0,73,
		74,5,19,0,0,74,75,3,10,5,0,75,82,1,0,0,0,76,77,3,12,6,0,77,78,5,20,0,0,
		78,79,3,10,5,0,79,82,1,0,0,0,80,82,3,12,6,0,81,72,1,0,0,0,81,76,1,0,0,
		0,81,80,1,0,0,0,82,11,1,0,0,0,83,84,3,14,7,0,84,85,5,21,0,0,85,86,3,12,
		6,0,86,93,1,0,0,0,87,88,3,14,7,0,88,89,5,22,0,0,89,90,3,12,6,0,90,93,1,
		0,0,0,91,93,3,14,7,0,92,83,1,0,0,0,92,87,1,0,0,0,92,91,1,0,0,0,93,13,1,
		0,0,0,94,95,3,16,8,0,95,96,5,15,0,0,96,97,3,14,7,0,97,112,1,0,0,0,98,99,
		3,16,8,0,99,100,5,16,0,0,100,101,3,14,7,0,101,112,1,0,0,0,102,103,3,16,
		8,0,103,104,5,17,0,0,104,105,3,14,7,0,105,112,1,0,0,0,106,107,3,16,8,0,
		107,108,5,18,0,0,108,109,3,14,7,0,109,112,1,0,0,0,110,112,3,16,8,0,111,
		94,1,0,0,0,111,98,1,0,0,0,111,102,1,0,0,0,111,106,1,0,0,0,111,110,1,0,
		0,0,112,15,1,0,0,0,113,121,5,13,0,0,114,121,5,14,0,0,115,121,5,12,0,0,
		116,117,5,3,0,0,117,118,3,10,5,0,118,119,5,4,0,0,119,121,1,0,0,0,120,113,
		1,0,0,0,120,114,1,0,0,0,120,115,1,0,0,0,120,116,1,0,0,0,121,17,1,0,0,0,
		122,123,3,20,10,0,123,124,5,19,0,0,124,125,3,18,9,0,125,128,1,0,0,0,126,
		128,3,20,10,0,127,122,1,0,0,0,127,126,1,0,0,0,128,19,1,0,0,0,129,136,5,
		11,0,0,130,136,5,12,0,0,131,132,5,3,0,0,132,133,3,18,9,0,133,134,5,4,0,
		0,134,136,1,0,0,0,135,129,1,0,0,0,135,130,1,0,0,0,135,131,1,0,0,0,136,
		21,1,0,0,0,13,25,33,41,46,54,68,70,81,92,111,120,127,135
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
