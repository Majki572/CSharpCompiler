//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/jakub/Documents/CSharpCompiler/Compiler/Grammar/KermitLang.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class KermitLangParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, INTEGER=12, REAL=13, BOOL=14, STRING=15, NUMBER=16, 
		INTEGER_NAME=17, REAL_NAME=18, BOOL_NAME=19, STRING_NAME=20, NUMBER_NAME=21, 
		ID=22, ADD=23, SUB=24, MUL=25, DIV=26, COMMENT=27, WS=28;
	public const int
		RULE_start = 0, RULE_base_statement = 1, RULE_statement = 2, RULE_expression = 3, 
		RULE_expression1 = 4, RULE_expression2 = 5, RULE_expression3 = 6, RULE_expressionString = 7;
	public static readonly string[] ruleNames = {
		"start", "base_statement", "statement", "expression", "expression1", "expression2", 
		"expression3", "expressionString"
	};

	private static readonly string[] _LiteralNames = {
		null, "'DECLARE'", "';'", "'ASSIGN'", "'SELECT'", "'READ_TO'", "'AND'", 
		"'OR'", "'XOR'", "'NEG'", "'('", "')'", null, null, null, null, null, 
		"'INTEGER'", "'REAL'", "'BOOL'", "'STRING'", "'NUMBER'", null, "'+'", 
		"'-'", "'*'", "'/'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"INTEGER", "REAL", "BOOL", "STRING", "NUMBER", "INTEGER_NAME", "REAL_NAME", 
		"BOOL_NAME", "STRING_NAME", "NUMBER_NAME", "ID", "ADD", "SUB", "MUL", 
		"DIV", "COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "KermitLang.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static KermitLangParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public KermitLangParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public KermitLangParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Base_statementContext[] base_statement() {
			return GetRuleContexts<Base_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Base_statementContext base_statement(int i) {
			return GetRuleContext<Base_statementContext>(i);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKermitLangVisitor<TResult> typedVisitor = visitor as IKermitLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 19;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 58L) != 0)) {
				{
				{
				State = 16;
				base_statement();
				}
				}
				State = 21;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Base_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public Base_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_base_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterBase_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitBase_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKermitLangVisitor<TResult> typedVisitor = visitor as IKermitLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBase_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Base_statementContext base_statement() {
		Base_statementContext _localctx = new Base_statementContext(Context, State);
		EnterRule(_localctx, 2, RULE_base_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 22;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PrintContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PrintContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterPrint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitPrint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKermitLangVisitor<TResult> typedVisitor = visitor as IKermitLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReadContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(KermitLangParser.ID, 0); }
		public ReadContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterRead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitRead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKermitLangVisitor<TResult> typedVisitor = visitor as IKermitLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRead(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeclareContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(KermitLangParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_NAME() { return GetToken(KermitLangParser.INTEGER_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL_NAME() { return GetToken(KermitLangParser.REAL_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_NAME() { return GetToken(KermitLangParser.BOOL_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_NAME() { return GetToken(KermitLangParser.STRING_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER_NAME() { return GetToken(KermitLangParser.NUMBER_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(KermitLangParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL() { return GetToken(KermitLangParser.REAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(KermitLangParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(KermitLangParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(KermitLangParser.NUMBER, 0); }
		public DeclareContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterDeclare(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitDeclare(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKermitLangVisitor<TResult> typedVisitor = visitor as IKermitLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclare(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Print_stringContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(KermitLangParser.STRING, 0); }
		public Print_stringContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterPrint_string(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitPrint_string(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKermitLangVisitor<TResult> typedVisitor = visitor as IKermitLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint_string(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(KermitLangParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(KermitLangParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(KermitLangParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL() { return GetToken(KermitLangParser.REAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(KermitLangParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(KermitLangParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(KermitLangParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStringContext expressionString() {
			return GetRuleContext<ExpressionStringContext>(0);
		}
		public AssignContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKermitLangVisitor<TResult> typedVisitor = visitor as IKermitLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		int _la;
		try {
			State = 52;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				_localctx = new DeclareContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 24;
				Match(T__0);
				State = 25;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4063232L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 26;
				Match(ID);
				State = 27;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 126976L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 28;
				Match(T__1);
				}
				break;
			case 2:
				_localctx = new AssignContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 29;
				Match(T__2);
				State = 30;
				Match(ID);
				State = 39;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
				case 1:
					{
					State = 31;
					Match(INTEGER);
					}
					break;
				case 2:
					{
					State = 32;
					Match(REAL);
					}
					break;
				case 3:
					{
					State = 33;
					Match(BOOL);
					}
					break;
				case 4:
					{
					State = 34;
					Match(ID);
					}
					break;
				case 5:
					{
					State = 35;
					Match(STRING);
					}
					break;
				case 6:
					{
					State = 36;
					Match(NUMBER);
					}
					break;
				case 7:
					{
					State = 37;
					expression();
					}
					break;
				case 8:
					{
					State = 38;
					expressionString(0);
					}
					break;
				}
				State = 41;
				Match(T__1);
				}
				break;
			case 3:
				_localctx = new PrintContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 42;
				Match(T__3);
				{
				State = 43;
				expression();
				}
				State = 44;
				Match(T__1);
				}
				break;
			case 4:
				_localctx = new Print_stringContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 46;
				Match(T__3);
				State = 47;
				Match(STRING);
				State = 48;
				Match(T__1);
				}
				break;
			case 5:
				_localctx = new ReadContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 49;
				Match(T__4);
				State = 50;
				Match(ID);
				State = 51;
				Match(T__1);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Expression1EmptyContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expression1Context expression1() {
			return GetRuleContext<Expression1Context>(0);
		}
		public Expression1EmptyContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterExpression1Empty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitExpression1Empty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKermitLangVisitor<TResult> typedVisitor = visitor as IKermitLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression1Empty(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expression_base_addContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expression1Context expression1() {
			return GetRuleContext<Expression1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(KermitLangParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Expression_base_addContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterExpression_base_add(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitExpression_base_add(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKermitLangVisitor<TResult> typedVisitor = visitor as IKermitLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_base_add(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expression_base_subContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expression1Context expression1() {
			return GetRuleContext<Expression1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(KermitLangParser.SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Expression_base_subContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterExpression_base_sub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitExpression_base_sub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKermitLangVisitor<TResult> typedVisitor = visitor as IKermitLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_base_sub(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 6, RULE_expression);
		try {
			State = 63;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				_localctx = new Expression_base_addContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 54;
				expression1();
				State = 55;
				Match(ADD);
				State = 56;
				expression();
				}
				break;
			case 2:
				_localctx = new Expression_base_subContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 58;
				expression1();
				State = 59;
				Match(SUB);
				State = 60;
				expression();
				}
				break;
			case 3:
				_localctx = new Expression1EmptyContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 62;
				expression1();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression1Context : ParserRuleContext {
		public Expression1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression1; } }
	 
		public Expression1Context() { }
		public virtual void CopyFrom(Expression1Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class Expression2EmptyContext : Expression1Context {
		[System.Diagnostics.DebuggerNonUserCode] public Expression2Context expression2() {
			return GetRuleContext<Expression2Context>(0);
		}
		public Expression2EmptyContext(Expression1Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterExpression2Empty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitExpression2Empty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKermitLangVisitor<TResult> typedVisitor = visitor as IKermitLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression2Empty(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expression_base_divContext : Expression1Context {
		[System.Diagnostics.DebuggerNonUserCode] public Expression2Context expression2() {
			return GetRuleContext<Expression2Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(KermitLangParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expression1Context expression1() {
			return GetRuleContext<Expression1Context>(0);
		}
		public Expression_base_divContext(Expression1Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterExpression_base_div(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitExpression_base_div(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKermitLangVisitor<TResult> typedVisitor = visitor as IKermitLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_base_div(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expression_base_mulContext : Expression1Context {
		[System.Diagnostics.DebuggerNonUserCode] public Expression2Context expression2() {
			return GetRuleContext<Expression2Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(KermitLangParser.MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expression1Context expression1() {
			return GetRuleContext<Expression1Context>(0);
		}
		public Expression_base_mulContext(Expression1Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterExpression_base_mul(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitExpression_base_mul(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKermitLangVisitor<TResult> typedVisitor = visitor as IKermitLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_base_mul(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression1Context expression1() {
		Expression1Context _localctx = new Expression1Context(Context, State);
		EnterRule(_localctx, 8, RULE_expression1);
		try {
			State = 74;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				_localctx = new Expression_base_mulContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 65;
				expression2();
				State = 66;
				Match(MUL);
				State = 67;
				expression1();
				}
				break;
			case 2:
				_localctx = new Expression_base_divContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 69;
				expression2();
				State = 70;
				Match(DIV);
				State = 71;
				expression1();
				}
				break;
			case 3:
				_localctx = new Expression2EmptyContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 73;
				expression2();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression2Context : ParserRuleContext {
		public Expression2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression2; } }
	 
		public Expression2Context() { }
		public virtual void CopyFrom(Expression2Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class NegContext : Expression2Context {
		[System.Diagnostics.DebuggerNonUserCode] public Expression3Context expression3() {
			return GetRuleContext<Expression3Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression2Context expression2() {
			return GetRuleContext<Expression2Context>(0);
		}
		public NegContext(Expression2Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterNeg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitNeg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKermitLangVisitor<TResult> typedVisitor = visitor as IKermitLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNeg(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrContext : Expression2Context {
		[System.Diagnostics.DebuggerNonUserCode] public Expression3Context expression3() {
			return GetRuleContext<Expression3Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression2Context expression2() {
			return GetRuleContext<Expression2Context>(0);
		}
		public OrContext(Expression2Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKermitLangVisitor<TResult> typedVisitor = visitor as IKermitLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expression4EmptyContext : Expression2Context {
		[System.Diagnostics.DebuggerNonUserCode] public Expression3Context expression3() {
			return GetRuleContext<Expression3Context>(0);
		}
		public Expression4EmptyContext(Expression2Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterExpression4Empty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitExpression4Empty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKermitLangVisitor<TResult> typedVisitor = visitor as IKermitLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression4Empty(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndContext : Expression2Context {
		[System.Diagnostics.DebuggerNonUserCode] public Expression3Context expression3() {
			return GetRuleContext<Expression3Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression2Context expression2() {
			return GetRuleContext<Expression2Context>(0);
		}
		public AndContext(Expression2Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKermitLangVisitor<TResult> typedVisitor = visitor as IKermitLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class XorContext : Expression2Context {
		[System.Diagnostics.DebuggerNonUserCode] public Expression3Context expression3() {
			return GetRuleContext<Expression3Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression2Context expression2() {
			return GetRuleContext<Expression2Context>(0);
		}
		public XorContext(Expression2Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterXor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitXor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKermitLangVisitor<TResult> typedVisitor = visitor as IKermitLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression2Context expression2() {
		Expression2Context _localctx = new Expression2Context(Context, State);
		EnterRule(_localctx, 10, RULE_expression2);
		try {
			State = 93;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				_localctx = new AndContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 76;
				expression3();
				State = 77;
				Match(T__5);
				State = 78;
				expression2();
				}
				break;
			case 2:
				_localctx = new OrContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 80;
				expression3();
				State = 81;
				Match(T__6);
				State = 82;
				expression2();
				}
				break;
			case 3:
				_localctx = new XorContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 84;
				expression3();
				State = 85;
				Match(T__7);
				State = 86;
				expression2();
				}
				break;
			case 4:
				_localctx = new NegContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 88;
				expression3();
				State = 89;
				Match(T__8);
				State = 90;
				expression2();
				}
				break;
			case 5:
				_localctx = new Expression4EmptyContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 92;
				expression3();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression3Context : ParserRuleContext {
		public Expression3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression3; } }
	 
		public Expression3Context() { }
		public virtual void CopyFrom(Expression3Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class NumberContext : Expression3Context {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(KermitLangParser.NUMBER, 0); }
		public NumberContext(Expression3Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKermitLangVisitor<TResult> typedVisitor = visitor as IKermitLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolContext : Expression3Context {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(KermitLangParser.BOOL, 0); }
		public BoolContext(Expression3Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterBool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitBool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKermitLangVisitor<TResult> typedVisitor = visitor as IKermitLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionInParensContext : Expression3Context {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionInParensContext(Expression3Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterExpressionInParens(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitExpressionInParens(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKermitLangVisitor<TResult> typedVisitor = visitor as IKermitLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionInParens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdContext : Expression3Context {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(KermitLangParser.ID, 0); }
		public IdContext(Expression3Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKermitLangVisitor<TResult> typedVisitor = visitor as IKermitLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FloatContext : Expression3Context {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL() { return GetToken(KermitLangParser.REAL, 0); }
		public FloatContext(Expression3Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKermitLangVisitor<TResult> typedVisitor = visitor as IKermitLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntContext : Expression3Context {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(KermitLangParser.INTEGER, 0); }
		public IntContext(Expression3Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKermitLangVisitor<TResult> typedVisitor = visitor as IKermitLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression3Context expression3() {
		Expression3Context _localctx = new Expression3Context(Context, State);
		EnterRule(_localctx, 12, RULE_expression3);
		try {
			State = 104;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER:
				_localctx = new IntContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 95;
				Match(INTEGER);
				}
				break;
			case REAL:
				_localctx = new FloatContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 96;
				Match(REAL);
				}
				break;
			case ID:
				_localctx = new IdContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 97;
				Match(ID);
				}
				break;
			case BOOL:
				_localctx = new BoolContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 98;
				Match(BOOL);
				}
				break;
			case NUMBER:
				_localctx = new NumberContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 99;
				Match(NUMBER);
				}
				break;
			case T__9:
				_localctx = new ExpressionInParensContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 100;
				Match(T__9);
				State = 101;
				expression();
				State = 102;
				Match(T__10);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStringContext : ParserRuleContext {
		public ExpressionStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionString; } }
	 
		public ExpressionStringContext() { }
		public virtual void CopyFrom(ExpressionStringContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class String_addContext : ExpressionStringContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStringContext[] expressionString() {
			return GetRuleContexts<ExpressionStringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStringContext expressionString(int i) {
			return GetRuleContext<ExpressionStringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(KermitLangParser.ADD, 0); }
		public String_addContext(ExpressionStringContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterString_add(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitString_add(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKermitLangVisitor<TResult> typedVisitor = visitor as IKermitLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_add(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringContext : ExpressionStringContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(KermitLangParser.STRING, 0); }
		public StringContext(ExpressionStringContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKermitLangVisitor<TResult> typedVisitor = visitor as IKermitLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStringContext expressionString() {
		return expressionString(0);
	}

	private ExpressionStringContext expressionString(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionStringContext _localctx = new ExpressionStringContext(Context, _parentState);
		ExpressionStringContext _prevctx = _localctx;
		int _startState = 14;
		EnterRecursionRule(_localctx, 14, RULE_expressionString, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new StringContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 107;
			Match(STRING);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 114;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new String_addContext(new ExpressionStringContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_expressionString);
					State = 109;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 110;
					Match(ADD);
					State = 111;
					expressionString(2);
					}
					} 
				}
				State = 116;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 7: return expressionString_sempred((ExpressionStringContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expressionString_sempred(ExpressionStringContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,28,118,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,1,0,5,0,18,8,0,10,0,12,0,21,9,0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,40,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,3,2,53,8,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,64,
		8,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,75,8,4,1,5,1,5,1,5,1,5,1,5,
		1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,94,8,5,1,6,1,6,1,6,
		1,6,1,6,1,6,1,6,1,6,1,6,3,6,105,8,6,1,7,1,7,1,7,1,7,1,7,1,7,5,7,113,8,
		7,10,7,12,7,116,9,7,1,7,0,1,14,8,0,2,4,6,8,10,12,14,0,2,1,0,17,21,1,0,
		12,16,135,0,19,1,0,0,0,2,22,1,0,0,0,4,52,1,0,0,0,6,63,1,0,0,0,8,74,1,0,
		0,0,10,93,1,0,0,0,12,104,1,0,0,0,14,106,1,0,0,0,16,18,3,2,1,0,17,16,1,
		0,0,0,18,21,1,0,0,0,19,17,1,0,0,0,19,20,1,0,0,0,20,1,1,0,0,0,21,19,1,0,
		0,0,22,23,3,4,2,0,23,3,1,0,0,0,24,25,5,1,0,0,25,26,7,0,0,0,26,27,5,22,
		0,0,27,28,7,1,0,0,28,53,5,2,0,0,29,30,5,3,0,0,30,39,5,22,0,0,31,40,5,12,
		0,0,32,40,5,13,0,0,33,40,5,14,0,0,34,40,5,22,0,0,35,40,5,15,0,0,36,40,
		5,16,0,0,37,40,3,6,3,0,38,40,3,14,7,0,39,31,1,0,0,0,39,32,1,0,0,0,39,33,
		1,0,0,0,39,34,1,0,0,0,39,35,1,0,0,0,39,36,1,0,0,0,39,37,1,0,0,0,39,38,
		1,0,0,0,40,41,1,0,0,0,41,53,5,2,0,0,42,43,5,4,0,0,43,44,3,6,3,0,44,45,
		5,2,0,0,45,53,1,0,0,0,46,47,5,4,0,0,47,48,5,15,0,0,48,53,5,2,0,0,49,50,
		5,5,0,0,50,51,5,22,0,0,51,53,5,2,0,0,52,24,1,0,0,0,52,29,1,0,0,0,52,42,
		1,0,0,0,52,46,1,0,0,0,52,49,1,0,0,0,53,5,1,0,0,0,54,55,3,8,4,0,55,56,5,
		23,0,0,56,57,3,6,3,0,57,64,1,0,0,0,58,59,3,8,4,0,59,60,5,24,0,0,60,61,
		3,6,3,0,61,64,1,0,0,0,62,64,3,8,4,0,63,54,1,0,0,0,63,58,1,0,0,0,63,62,
		1,0,0,0,64,7,1,0,0,0,65,66,3,10,5,0,66,67,5,25,0,0,67,68,3,8,4,0,68,75,
		1,0,0,0,69,70,3,10,5,0,70,71,5,26,0,0,71,72,3,8,4,0,72,75,1,0,0,0,73,75,
		3,10,5,0,74,65,1,0,0,0,74,69,1,0,0,0,74,73,1,0,0,0,75,9,1,0,0,0,76,77,
		3,12,6,0,77,78,5,6,0,0,78,79,3,10,5,0,79,94,1,0,0,0,80,81,3,12,6,0,81,
		82,5,7,0,0,82,83,3,10,5,0,83,94,1,0,0,0,84,85,3,12,6,0,85,86,5,8,0,0,86,
		87,3,10,5,0,87,94,1,0,0,0,88,89,3,12,6,0,89,90,5,9,0,0,90,91,3,10,5,0,
		91,94,1,0,0,0,92,94,3,12,6,0,93,76,1,0,0,0,93,80,1,0,0,0,93,84,1,0,0,0,
		93,88,1,0,0,0,93,92,1,0,0,0,94,11,1,0,0,0,95,105,5,12,0,0,96,105,5,13,
		0,0,97,105,5,22,0,0,98,105,5,14,0,0,99,105,5,16,0,0,100,101,5,10,0,0,101,
		102,3,6,3,0,102,103,5,11,0,0,103,105,1,0,0,0,104,95,1,0,0,0,104,96,1,0,
		0,0,104,97,1,0,0,0,104,98,1,0,0,0,104,99,1,0,0,0,104,100,1,0,0,0,105,13,
		1,0,0,0,106,107,6,7,-1,0,107,108,5,15,0,0,108,114,1,0,0,0,109,110,10,1,
		0,0,110,111,5,23,0,0,111,113,3,14,7,2,112,109,1,0,0,0,113,116,1,0,0,0,
		114,112,1,0,0,0,114,115,1,0,0,0,115,15,1,0,0,0,116,114,1,0,0,0,8,19,39,
		52,63,74,93,104,114
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
