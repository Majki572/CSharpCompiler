//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/jakub/Documents/CSharpCompiler/Compiler/Grammar/KermitLang.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class KermitLangParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, NUMBER=12, BOOL=13, STRING=14, SHORT_NAME=15, INTEGER_NAME=16, 
		LONG_NAME=17, FLOAT_NAME=18, DOUBLE_NAME=19, REAL_NAME=20, BOOL_NAME=21, 
		STRING_NAME=22, NUMBER_NAME=23, ID=24, ADD=25, SUB=26, MUL=27, DIV=28, 
		COMMENT=29, WS=30;
	public const int
		RULE_start = 0, RULE_base_statement = 1, RULE_statement = 2, RULE_expression = 3, 
		RULE_expression1 = 4, RULE_expression2 = 5, RULE_expression3 = 6;
	public static readonly string[] ruleNames = {
		"start", "base_statement", "statement", "expression", "expression1", "expression2", 
		"expression3"
	};

	private static readonly string[] _LiteralNames = {
		null, "'DECLARE'", "';'", "'ASSIGN'", "'PRINT'", "'READ'", "'AND'", "'OR'", 
		"'XOR'", "'NEG'", "'('", "')'", null, null, null, "'SHORT'", "'INTEGER'", 
		"'LONG'", "'FLOAT'", "'DOUBLE'", "'REAL'", "'BOOL'", "'STRING'", "'NUMBER'", 
		null, "'+'", "'-'", "'*'", "'/'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"NUMBER", "BOOL", "STRING", "SHORT_NAME", "INTEGER_NAME", "LONG_NAME", 
		"FLOAT_NAME", "DOUBLE_NAME", "REAL_NAME", "BOOL_NAME", "STRING_NAME", 
		"NUMBER_NAME", "ID", "ADD", "SUB", "MUL", "DIV", "COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "KermitLang.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static KermitLangParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public KermitLangParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public KermitLangParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Base_statementContext[] base_statement() {
			return GetRuleContexts<Base_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Base_statementContext base_statement(int i) {
			return GetRuleContext<Base_statementContext>(i);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKermitLangVisitor<TResult> typedVisitor = visitor as IKermitLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 17;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 58L) != 0)) {
				{
				{
				State = 14;
				base_statement();
				}
				}
				State = 19;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Base_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public Base_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_base_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterBase_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitBase_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKermitLangVisitor<TResult> typedVisitor = visitor as IKermitLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBase_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Base_statementContext base_statement() {
		Base_statementContext _localctx = new Base_statementContext(Context, State);
		EnterRule(_localctx, 2, RULE_base_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 20;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PrintContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PrintContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterPrint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitPrint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKermitLangVisitor<TResult> typedVisitor = visitor as IKermitLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReadContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(KermitLangParser.ID, 0); }
		public ReadContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterRead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitRead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKermitLangVisitor<TResult> typedVisitor = visitor as IKermitLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRead(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeclareContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(KermitLangParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_NAME() { return GetToken(KermitLangParser.INTEGER_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHORT_NAME() { return GetToken(KermitLangParser.SHORT_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONG_NAME() { return GetToken(KermitLangParser.LONG_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_NAME() { return GetToken(KermitLangParser.BOOL_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_NAME() { return GetToken(KermitLangParser.DOUBLE_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_NAME() { return GetToken(KermitLangParser.FLOAT_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_NAME() { return GetToken(KermitLangParser.STRING_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER_NAME() { return GetToken(KermitLangParser.NUMBER_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeclareContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterDeclare(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitDeclare(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKermitLangVisitor<TResult> typedVisitor = visitor as IKermitLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclare(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(KermitLangParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKermitLangVisitor<TResult> typedVisitor = visitor as IKermitLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		int _la;
		try {
			State = 40;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				_localctx = new DeclareContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 22;
				Match(T__0);
				State = 23;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 15695872L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 24;
				Match(ID);
				{
				State = 25;
				expression();
				}
				State = 26;
				Match(T__1);
				}
				break;
			case T__2:
				_localctx = new AssignContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 28;
				Match(T__2);
				State = 29;
				Match(ID);
				{
				State = 30;
				expression();
				}
				State = 31;
				Match(T__1);
				}
				break;
			case T__3:
				_localctx = new PrintContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 33;
				Match(T__3);
				{
				State = 34;
				expression();
				}
				State = 35;
				Match(T__1);
				}
				break;
			case T__4:
				_localctx = new ReadContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 37;
				Match(T__4);
				State = 38;
				Match(ID);
				State = 39;
				Match(T__1);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Expression1EmptyContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expression1Context expression1() {
			return GetRuleContext<Expression1Context>(0);
		}
		public Expression1EmptyContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterExpression1Empty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitExpression1Empty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKermitLangVisitor<TResult> typedVisitor = visitor as IKermitLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression1Empty(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expression_base_addContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expression1Context expression1() {
			return GetRuleContext<Expression1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(KermitLangParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Expression_base_addContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterExpression_base_add(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitExpression_base_add(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKermitLangVisitor<TResult> typedVisitor = visitor as IKermitLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_base_add(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expression_base_subContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expression1Context expression1() {
			return GetRuleContext<Expression1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(KermitLangParser.SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Expression_base_subContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterExpression_base_sub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitExpression_base_sub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKermitLangVisitor<TResult> typedVisitor = visitor as IKermitLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_base_sub(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 6, RULE_expression);
		try {
			State = 51;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				_localctx = new Expression_base_addContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 42;
				expression1();
				State = 43;
				Match(ADD);
				State = 44;
				expression();
				}
				break;
			case 2:
				_localctx = new Expression_base_subContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 46;
				expression1();
				State = 47;
				Match(SUB);
				State = 48;
				expression();
				}
				break;
			case 3:
				_localctx = new Expression1EmptyContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 50;
				expression1();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression1Context : ParserRuleContext {
		public Expression1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression1; } }
	 
		public Expression1Context() { }
		public virtual void CopyFrom(Expression1Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class Expression2EmptyContext : Expression1Context {
		[System.Diagnostics.DebuggerNonUserCode] public Expression2Context expression2() {
			return GetRuleContext<Expression2Context>(0);
		}
		public Expression2EmptyContext(Expression1Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterExpression2Empty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitExpression2Empty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKermitLangVisitor<TResult> typedVisitor = visitor as IKermitLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression2Empty(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expression_base_divContext : Expression1Context {
		[System.Diagnostics.DebuggerNonUserCode] public Expression2Context expression2() {
			return GetRuleContext<Expression2Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(KermitLangParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expression1Context expression1() {
			return GetRuleContext<Expression1Context>(0);
		}
		public Expression_base_divContext(Expression1Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterExpression_base_div(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitExpression_base_div(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKermitLangVisitor<TResult> typedVisitor = visitor as IKermitLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_base_div(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expression_base_mulContext : Expression1Context {
		[System.Diagnostics.DebuggerNonUserCode] public Expression2Context expression2() {
			return GetRuleContext<Expression2Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(KermitLangParser.MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expression1Context expression1() {
			return GetRuleContext<Expression1Context>(0);
		}
		public Expression_base_mulContext(Expression1Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterExpression_base_mul(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitExpression_base_mul(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKermitLangVisitor<TResult> typedVisitor = visitor as IKermitLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_base_mul(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression1Context expression1() {
		Expression1Context _localctx = new Expression1Context(Context, State);
		EnterRule(_localctx, 8, RULE_expression1);
		try {
			State = 62;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				_localctx = new Expression_base_mulContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 53;
				expression2();
				State = 54;
				Match(MUL);
				State = 55;
				expression1();
				}
				break;
			case 2:
				_localctx = new Expression_base_divContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 57;
				expression2();
				State = 58;
				Match(DIV);
				State = 59;
				expression1();
				}
				break;
			case 3:
				_localctx = new Expression2EmptyContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 61;
				expression2();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression2Context : ParserRuleContext {
		public Expression2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression2; } }
	 
		public Expression2Context() { }
		public virtual void CopyFrom(Expression2Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class NegContext : Expression2Context {
		[System.Diagnostics.DebuggerNonUserCode] public Expression3Context expression3() {
			return GetRuleContext<Expression3Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression2Context expression2() {
			return GetRuleContext<Expression2Context>(0);
		}
		public NegContext(Expression2Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterNeg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitNeg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKermitLangVisitor<TResult> typedVisitor = visitor as IKermitLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNeg(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrContext : Expression2Context {
		[System.Diagnostics.DebuggerNonUserCode] public Expression3Context expression3() {
			return GetRuleContext<Expression3Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression2Context expression2() {
			return GetRuleContext<Expression2Context>(0);
		}
		public OrContext(Expression2Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKermitLangVisitor<TResult> typedVisitor = visitor as IKermitLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expression4EmptyContext : Expression2Context {
		[System.Diagnostics.DebuggerNonUserCode] public Expression3Context expression3() {
			return GetRuleContext<Expression3Context>(0);
		}
		public Expression4EmptyContext(Expression2Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterExpression4Empty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitExpression4Empty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKermitLangVisitor<TResult> typedVisitor = visitor as IKermitLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression4Empty(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndContext : Expression2Context {
		[System.Diagnostics.DebuggerNonUserCode] public Expression3Context expression3() {
			return GetRuleContext<Expression3Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression2Context expression2() {
			return GetRuleContext<Expression2Context>(0);
		}
		public AndContext(Expression2Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKermitLangVisitor<TResult> typedVisitor = visitor as IKermitLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class XorContext : Expression2Context {
		[System.Diagnostics.DebuggerNonUserCode] public Expression3Context expression3() {
			return GetRuleContext<Expression3Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression2Context expression2() {
			return GetRuleContext<Expression2Context>(0);
		}
		public XorContext(Expression2Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterXor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitXor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKermitLangVisitor<TResult> typedVisitor = visitor as IKermitLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression2Context expression2() {
		Expression2Context _localctx = new Expression2Context(Context, State);
		EnterRule(_localctx, 10, RULE_expression2);
		try {
			State = 81;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				_localctx = new AndContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 64;
				expression3();
				State = 65;
				Match(T__5);
				State = 66;
				expression2();
				}
				break;
			case 2:
				_localctx = new OrContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 68;
				expression3();
				State = 69;
				Match(T__6);
				State = 70;
				expression2();
				}
				break;
			case 3:
				_localctx = new XorContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 72;
				expression3();
				State = 73;
				Match(T__7);
				State = 74;
				expression2();
				}
				break;
			case 4:
				_localctx = new NegContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 76;
				expression3();
				State = 77;
				Match(T__8);
				State = 78;
				expression2();
				}
				break;
			case 5:
				_localctx = new Expression4EmptyContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 80;
				expression3();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression3Context : ParserRuleContext {
		public Expression3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression3; } }
	 
		public Expression3Context() { }
		public virtual void CopyFrom(Expression3Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class NumberContext : Expression3Context {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(KermitLangParser.NUMBER, 0); }
		public NumberContext(Expression3Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKermitLangVisitor<TResult> typedVisitor = visitor as IKermitLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolContext : Expression3Context {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(KermitLangParser.BOOL, 0); }
		public BoolContext(Expression3Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterBool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitBool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKermitLangVisitor<TResult> typedVisitor = visitor as IKermitLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringContext : Expression3Context {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(KermitLangParser.STRING, 0); }
		public StringContext(Expression3Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKermitLangVisitor<TResult> typedVisitor = visitor as IKermitLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionInParensContext : Expression3Context {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionInParensContext(Expression3Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterExpressionInParens(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitExpressionInParens(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKermitLangVisitor<TResult> typedVisitor = visitor as IKermitLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionInParens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdContext : Expression3Context {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(KermitLangParser.ID, 0); }
		public IdContext(Expression3Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKermitLangVisitor<TResult> typedVisitor = visitor as IKermitLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression3Context expression3() {
		Expression3Context _localctx = new Expression3Context(Context, State);
		EnterRule(_localctx, 12, RULE_expression3);
		try {
			State = 91;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				_localctx = new IdContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 83;
				Match(ID);
				}
				break;
			case BOOL:
				_localctx = new BoolContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 84;
				Match(BOOL);
				}
				break;
			case NUMBER:
				_localctx = new NumberContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 85;
				Match(NUMBER);
				}
				break;
			case STRING:
				_localctx = new StringContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 86;
				Match(STRING);
				}
				break;
			case T__9:
				_localctx = new ExpressionInParensContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 87;
				Match(T__9);
				State = 88;
				expression();
				State = 89;
				Match(T__10);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,30,94,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,1,0,
		5,0,16,8,0,10,0,12,0,19,9,0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,41,8,2,1,3,1,3,1,3,1,3,1,3,1,
		3,1,3,1,3,1,3,3,3,52,8,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,63,8,
		4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
		3,5,82,8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,92,8,6,1,6,0,0,7,0,2,4,
		6,8,10,12,0,1,2,0,15,19,21,23,102,0,17,1,0,0,0,2,20,1,0,0,0,4,40,1,0,0,
		0,6,51,1,0,0,0,8,62,1,0,0,0,10,81,1,0,0,0,12,91,1,0,0,0,14,16,3,2,1,0,
		15,14,1,0,0,0,16,19,1,0,0,0,17,15,1,0,0,0,17,18,1,0,0,0,18,1,1,0,0,0,19,
		17,1,0,0,0,20,21,3,4,2,0,21,3,1,0,0,0,22,23,5,1,0,0,23,24,7,0,0,0,24,25,
		5,24,0,0,25,26,3,6,3,0,26,27,5,2,0,0,27,41,1,0,0,0,28,29,5,3,0,0,29,30,
		5,24,0,0,30,31,3,6,3,0,31,32,5,2,0,0,32,41,1,0,0,0,33,34,5,4,0,0,34,35,
		3,6,3,0,35,36,5,2,0,0,36,41,1,0,0,0,37,38,5,5,0,0,38,39,5,24,0,0,39,41,
		5,2,0,0,40,22,1,0,0,0,40,28,1,0,0,0,40,33,1,0,0,0,40,37,1,0,0,0,41,5,1,
		0,0,0,42,43,3,8,4,0,43,44,5,25,0,0,44,45,3,6,3,0,45,52,1,0,0,0,46,47,3,
		8,4,0,47,48,5,26,0,0,48,49,3,6,3,0,49,52,1,0,0,0,50,52,3,8,4,0,51,42,1,
		0,0,0,51,46,1,0,0,0,51,50,1,0,0,0,52,7,1,0,0,0,53,54,3,10,5,0,54,55,5,
		27,0,0,55,56,3,8,4,0,56,63,1,0,0,0,57,58,3,10,5,0,58,59,5,28,0,0,59,60,
		3,8,4,0,60,63,1,0,0,0,61,63,3,10,5,0,62,53,1,0,0,0,62,57,1,0,0,0,62,61,
		1,0,0,0,63,9,1,0,0,0,64,65,3,12,6,0,65,66,5,6,0,0,66,67,3,10,5,0,67,82,
		1,0,0,0,68,69,3,12,6,0,69,70,5,7,0,0,70,71,3,10,5,0,71,82,1,0,0,0,72,73,
		3,12,6,0,73,74,5,8,0,0,74,75,3,10,5,0,75,82,1,0,0,0,76,77,3,12,6,0,77,
		78,5,9,0,0,78,79,3,10,5,0,79,82,1,0,0,0,80,82,3,12,6,0,81,64,1,0,0,0,81,
		68,1,0,0,0,81,72,1,0,0,0,81,76,1,0,0,0,81,80,1,0,0,0,82,11,1,0,0,0,83,
		92,5,24,0,0,84,92,5,13,0,0,85,92,5,12,0,0,86,92,5,14,0,0,87,88,5,10,0,
		0,88,89,3,6,3,0,89,90,5,11,0,0,90,92,1,0,0,0,91,83,1,0,0,0,91,84,1,0,0,
		0,91,85,1,0,0,0,91,86,1,0,0,0,91,87,1,0,0,0,92,13,1,0,0,0,6,17,40,51,62,
		81,91
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
