//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from f:/GitHubRepository/CSharpCompiler/Compiler/Grammar/KermitLang.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class KermitLangParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, NUMBER=8, BOOL=9, 
		STRING=10, SHORT_NAME=11, INTEGER_NAME=12, LONG_NAME=13, FLOAT_NAME=14, 
		DOUBLE_NAME=15, REAL_NAME=16, BOOL_NAME=17, PRINT=18, READ=19, IF=20, 
		ELSE=21, WHILE=22, STRUCT=23, STRING_NAME=24, NUMBER_NAME=25, ID=26, ADD=27, 
		SUB=28, MUL=29, DIV=30, L_PAR=31, P_PAR=32, L_CURL=33, P_CURL=34, COMMENT=35, 
		WS=36;
	public const int
		RULE_start = 0, RULE_base_statement = 1, RULE_statement = 2, RULE_type = 3, 
		RULE_expression = 4, RULE_expression1 = 5, RULE_expression2 = 6, RULE_expression3 = 7, 
		RULE_if_statement = 8, RULE_while_statement = 9, RULE_function_definition = 10, 
		RULE_parameter_list = 11, RULE_parameter = 12, RULE_function_call = 13, 
		RULE_argument_list = 14, RULE_statement_block = 15, RULE_struct_definition = 16, 
		RULE_struct_body = 17;
	public static readonly string[] ruleNames = {
		"start", "base_statement", "statement", "type", "expression", "expression1", 
		"expression2", "expression3", "if_statement", "while_statement", "function_definition", 
		"parameter_list", "parameter", "function_call", "argument_list", "statement_block", 
		"struct_definition", "struct_body"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'='", "'AND'", "'OR'", "'XOR'", "'NEG'", "','", null, null, 
		null, "'short'", "'int'", "'long'", "'float'", "'double'", "'real'", "'bool'", 
		"'print'", "'read'", "'if'", "'else'", "'while'", "'struct'", "'STRING'", 
		"'NUMBER'", null, "'+'", "'-'", "'*'", "'/'", "'('", "')'", "'{'", "'}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, "NUMBER", "BOOL", "STRING", 
		"SHORT_NAME", "INTEGER_NAME", "LONG_NAME", "FLOAT_NAME", "DOUBLE_NAME", 
		"REAL_NAME", "BOOL_NAME", "PRINT", "READ", "IF", "ELSE", "WHILE", "STRUCT", 
		"STRING_NAME", "NUMBER_NAME", "ID", "ADD", "SUB", "MUL", "DIV", "L_PAR", 
		"P_PAR", "L_CURL", "P_CURL", "COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "KermitLang.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static KermitLangParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public KermitLangParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public KermitLangParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Base_statementContext[] base_statement() {
			return GetRuleContexts<Base_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Base_statementContext base_statement(int i) {
			return GetRuleContext<Base_statementContext>(i);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 132052992L) != 0)) {
				{
				{
				State = 36;
				base_statement();
				}
				}
				State = 41;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Base_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public Base_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_base_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterBase_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitBase_statement(this);
		}
	}

	[RuleVersion(0)]
	public Base_statementContext base_statement() {
		Base_statementContext _localctx = new Base_statementContext(Context, State);
		EnterRule(_localctx, 2, RULE_base_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IfBlockContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		public IfBlockContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterIfBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitIfBlock(this);
		}
	}
	public partial class PrintContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(KermitLangParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAR() { return GetToken(KermitLangParser.L_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode P_PAR() { return GetToken(KermitLangParser.P_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PrintContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterPrint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitPrint(this);
		}
	}
	public partial class ReadContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(KermitLangParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAR() { return GetToken(KermitLangParser.L_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(KermitLangParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode P_PAR() { return GetToken(KermitLangParser.P_PAR, 0); }
		public ReadContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterRead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitRead(this);
		}
	}
	public partial class DeclareContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(KermitLangParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeclareContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterDeclare(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitDeclare(this);
		}
	}
	public partial class WhileBlockContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public While_statementContext while_statement() {
			return GetRuleContext<While_statementContext>(0);
		}
		public WhileBlockContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterWhileBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitWhileBlock(this);
		}
	}
	public partial class FunctionBlockContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_definitionContext function_definition() {
			return GetRuleContext<Function_definitionContext>(0);
		}
		public FunctionBlockContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterFunctionBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitFunctionBlock(this);
		}
	}
	public partial class StructBlockContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public Struct_definitionContext struct_definition() {
			return GetRuleContext<Struct_definitionContext>(0);
		}
		public StructBlockContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterStructBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitStructBlock(this);
		}
	}
	public partial class AssignContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(KermitLangParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitAssign(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 77;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				_localctx = new DeclareContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 44;
				type();
				State = 45;
				Match(ID);
				{
				State = 46;
				expression();
				}
				State = 47;
				Match(T__0);
				}
				break;
			case 2:
				_localctx = new AssignContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 49;
				Match(ID);
				State = 50;
				Match(T__1);
				{
				State = 51;
				expression();
				}
				State = 52;
				Match(T__0);
				}
				break;
			case 3:
				_localctx = new PrintContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 54;
				Match(PRINT);
				State = 55;
				Match(L_PAR);
				{
				State = 56;
				expression();
				}
				State = 57;
				Match(P_PAR);
				State = 58;
				Match(T__0);
				}
				break;
			case 4:
				_localctx = new ReadContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 60;
				Match(READ);
				State = 61;
				Match(L_PAR);
				State = 62;
				Match(ID);
				State = 63;
				Match(P_PAR);
				State = 64;
				Match(T__0);
				}
				break;
			case 5:
				_localctx = new IfBlockContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 65;
				if_statement();
				State = 66;
				Match(T__0);
				}
				break;
			case 6:
				_localctx = new WhileBlockContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 68;
				while_statement();
				State = 69;
				Match(T__0);
				}
				break;
			case 7:
				_localctx = new FunctionBlockContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 71;
				function_definition();
				State = 72;
				Match(T__0);
				}
				break;
			case 8:
				_localctx = new StructBlockContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 74;
				struct_definition();
				State = 75;
				Match(T__0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_NAME() { return GetToken(KermitLangParser.INTEGER_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHORT_NAME() { return GetToken(KermitLangParser.SHORT_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONG_NAME() { return GetToken(KermitLangParser.LONG_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_NAME() { return GetToken(KermitLangParser.BOOL_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_NAME() { return GetToken(KermitLangParser.DOUBLE_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_NAME() { return GetToken(KermitLangParser.FLOAT_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_NAME() { return GetToken(KermitLangParser.STRING_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER_NAME() { return GetToken(KermitLangParser.NUMBER_NAME, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 6, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 50526208L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Expression1EmptyContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expression1Context expression1() {
			return GetRuleContext<Expression1Context>(0);
		}
		public Expression1EmptyContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterExpression1Empty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitExpression1Empty(this);
		}
	}
	public partial class ExpressionBaseSubContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expression1Context expression1() {
			return GetRuleContext<Expression1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(KermitLangParser.SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionBaseSubContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterExpressionBaseSub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitExpressionBaseSub(this);
		}
	}
	public partial class ExpressionBaseAddContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expression1Context expression1() {
			return GetRuleContext<Expression1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(KermitLangParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionBaseAddContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterExpressionBaseAdd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitExpressionBaseAdd(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 8, RULE_expression);
		try {
			State = 90;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				_localctx = new ExpressionBaseAddContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 81;
				expression1();
				State = 82;
				Match(ADD);
				State = 83;
				expression();
				}
				break;
			case 2:
				_localctx = new ExpressionBaseSubContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 85;
				expression1();
				State = 86;
				Match(SUB);
				State = 87;
				expression();
				}
				break;
			case 3:
				_localctx = new Expression1EmptyContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 89;
				expression1();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression1Context : ParserRuleContext {
		public Expression1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression1; } }
	 
		public Expression1Context() { }
		public virtual void CopyFrom(Expression1Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExpressionBaseMulContext : Expression1Context {
		[System.Diagnostics.DebuggerNonUserCode] public Expression2Context expression2() {
			return GetRuleContext<Expression2Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(KermitLangParser.MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expression1Context expression1() {
			return GetRuleContext<Expression1Context>(0);
		}
		public ExpressionBaseMulContext(Expression1Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterExpressionBaseMul(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitExpressionBaseMul(this);
		}
	}
	public partial class Expression2EmptyContext : Expression1Context {
		[System.Diagnostics.DebuggerNonUserCode] public Expression2Context expression2() {
			return GetRuleContext<Expression2Context>(0);
		}
		public Expression2EmptyContext(Expression1Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterExpression2Empty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitExpression2Empty(this);
		}
	}
	public partial class ExpressionBaseDivContext : Expression1Context {
		[System.Diagnostics.DebuggerNonUserCode] public Expression2Context expression2() {
			return GetRuleContext<Expression2Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(KermitLangParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expression1Context expression1() {
			return GetRuleContext<Expression1Context>(0);
		}
		public ExpressionBaseDivContext(Expression1Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterExpressionBaseDiv(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitExpressionBaseDiv(this);
		}
	}

	[RuleVersion(0)]
	public Expression1Context expression1() {
		Expression1Context _localctx = new Expression1Context(Context, State);
		EnterRule(_localctx, 10, RULE_expression1);
		try {
			State = 101;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				_localctx = new ExpressionBaseMulContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 92;
				expression2();
				State = 93;
				Match(MUL);
				State = 94;
				expression1();
				}
				break;
			case 2:
				_localctx = new ExpressionBaseDivContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 96;
				expression2();
				State = 97;
				Match(DIV);
				State = 98;
				expression1();
				}
				break;
			case 3:
				_localctx = new Expression2EmptyContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 100;
				expression2();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression2Context : ParserRuleContext {
		public Expression2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression2; } }
	 
		public Expression2Context() { }
		public virtual void CopyFrom(Expression2Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class NegContext : Expression2Context {
		[System.Diagnostics.DebuggerNonUserCode] public Expression3Context expression3() {
			return GetRuleContext<Expression3Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression2Context expression2() {
			return GetRuleContext<Expression2Context>(0);
		}
		public NegContext(Expression2Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterNeg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitNeg(this);
		}
	}
	public partial class OrContext : Expression2Context {
		[System.Diagnostics.DebuggerNonUserCode] public Expression3Context expression3() {
			return GetRuleContext<Expression3Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression2Context expression2() {
			return GetRuleContext<Expression2Context>(0);
		}
		public OrContext(Expression2Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitOr(this);
		}
	}
	public partial class Expression4EmptyContext : Expression2Context {
		[System.Diagnostics.DebuggerNonUserCode] public Expression3Context expression3() {
			return GetRuleContext<Expression3Context>(0);
		}
		public Expression4EmptyContext(Expression2Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterExpression4Empty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitExpression4Empty(this);
		}
	}
	public partial class AndContext : Expression2Context {
		[System.Diagnostics.DebuggerNonUserCode] public Expression3Context expression3() {
			return GetRuleContext<Expression3Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression2Context expression2() {
			return GetRuleContext<Expression2Context>(0);
		}
		public AndContext(Expression2Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitAnd(this);
		}
	}
	public partial class XorContext : Expression2Context {
		[System.Diagnostics.DebuggerNonUserCode] public Expression3Context expression3() {
			return GetRuleContext<Expression3Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression2Context expression2() {
			return GetRuleContext<Expression2Context>(0);
		}
		public XorContext(Expression2Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterXor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitXor(this);
		}
	}

	[RuleVersion(0)]
	public Expression2Context expression2() {
		Expression2Context _localctx = new Expression2Context(Context, State);
		EnterRule(_localctx, 12, RULE_expression2);
		try {
			State = 120;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				_localctx = new AndContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 103;
				expression3();
				State = 104;
				Match(T__2);
				State = 105;
				expression2();
				}
				break;
			case 2:
				_localctx = new OrContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 107;
				expression3();
				State = 108;
				Match(T__3);
				State = 109;
				expression2();
				}
				break;
			case 3:
				_localctx = new XorContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 111;
				expression3();
				State = 112;
				Match(T__4);
				State = 113;
				expression2();
				}
				break;
			case 4:
				_localctx = new NegContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 115;
				expression3();
				State = 116;
				Match(T__5);
				State = 117;
				expression2();
				}
				break;
			case 5:
				_localctx = new Expression4EmptyContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 119;
				expression3();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression3Context : ParserRuleContext {
		public Expression3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression3; } }
	 
		public Expression3Context() { }
		public virtual void CopyFrom(Expression3Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class NumberContext : Expression3Context {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(KermitLangParser.NUMBER, 0); }
		public NumberContext(Expression3Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
	}
	public partial class BoolContext : Expression3Context {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(KermitLangParser.BOOL, 0); }
		public BoolContext(Expression3Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterBool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitBool(this);
		}
	}
	public partial class StringContext : Expression3Context {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(KermitLangParser.STRING, 0); }
		public StringContext(Expression3Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
	}
	public partial class FunctionCallContext : Expression3Context {
		[System.Diagnostics.DebuggerNonUserCode] public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public FunctionCallContext(Expression3Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
	}
	public partial class ExpressionInParensContext : Expression3Context {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAR() { return GetToken(KermitLangParser.L_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode P_PAR() { return GetToken(KermitLangParser.P_PAR, 0); }
		public ExpressionInParensContext(Expression3Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterExpressionInParens(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitExpressionInParens(this);
		}
	}
	public partial class IdContext : Expression3Context {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(KermitLangParser.ID, 0); }
		public IdContext(Expression3Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitId(this);
		}
	}

	[RuleVersion(0)]
	public Expression3Context expression3() {
		Expression3Context _localctx = new Expression3Context(Context, State);
		EnterRule(_localctx, 14, RULE_expression3);
		try {
			State = 131;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				_localctx = new IdContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 122;
				Match(ID);
				}
				break;
			case 2:
				_localctx = new BoolContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 123;
				Match(BOOL);
				}
				break;
			case 3:
				_localctx = new NumberContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 124;
				Match(NUMBER);
				}
				break;
			case 4:
				_localctx = new StringContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 125;
				Match(STRING);
				}
				break;
			case 5:
				_localctx = new ExpressionInParensContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 126;
				Match(L_PAR);
				State = 127;
				expression();
				State = 128;
				Match(P_PAR);
				}
				break;
			case 6:
				_localctx = new FunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 130;
				function_call();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
	 
		public If_statementContext() { }
		public virtual void CopyFrom(If_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IfStatementContext : If_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(KermitLangParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAR() { return GetToken(KermitLangParser.L_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode P_PAR() { return GetToken(KermitLangParser.P_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_CURL() { return GetToken(KermitLangParser.L_CURL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Statement_blockContext statement_block() {
			return GetRuleContext<Statement_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode P_CURL() { return GetToken(KermitLangParser.P_CURL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(KermitLangParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(KermitLangParser.BOOL, 0); }
		public IfStatementContext(If_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 16, RULE_if_statement);
		int _la;
		try {
			_localctx = new IfStatementContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 133;
			Match(IF);
			State = 134;
			Match(L_PAR);
			State = 135;
			_la = TokenStream.LA(1);
			if ( !(_la==BOOL || _la==ID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 136;
			Match(P_PAR);
			State = 137;
			Match(L_CURL);
			State = 138;
			statement_block();
			State = 139;
			Match(P_CURL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_statementContext : ParserRuleContext {
		public While_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_statement; } }
	 
		public While_statementContext() { }
		public virtual void CopyFrom(While_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class WhileLoopContext : While_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(KermitLangParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAR() { return GetToken(KermitLangParser.L_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode P_PAR() { return GetToken(KermitLangParser.P_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_CURL() { return GetToken(KermitLangParser.L_CURL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Statement_blockContext statement_block() {
			return GetRuleContext<Statement_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode P_CURL() { return GetToken(KermitLangParser.P_CURL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public WhileLoopContext(While_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterWhileLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitWhileLoop(this);
		}
	}

	[RuleVersion(0)]
	public While_statementContext while_statement() {
		While_statementContext _localctx = new While_statementContext(Context, State);
		EnterRule(_localctx, 18, RULE_while_statement);
		try {
			_localctx = new WhileLoopContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 141;
			Match(WHILE);
			State = 142;
			Match(L_PAR);
			{
			State = 143;
			expression();
			}
			State = 144;
			Match(P_PAR);
			State = 145;
			Match(L_CURL);
			State = 146;
			statement_block();
			State = 147;
			Match(P_CURL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_definitionContext : ParserRuleContext {
		public Function_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_definition; } }
	 
		public Function_definitionContext() { }
		public virtual void CopyFrom(Function_definitionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FunctionDefContext : Function_definitionContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(KermitLangParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAR() { return GetToken(KermitLangParser.L_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_listContext parameter_list() {
			return GetRuleContext<Parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode P_PAR() { return GetToken(KermitLangParser.P_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_CURL() { return GetToken(KermitLangParser.L_CURL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Statement_blockContext statement_block() {
			return GetRuleContext<Statement_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode P_CURL() { return GetToken(KermitLangParser.P_CURL, 0); }
		public FunctionDefContext(Function_definitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterFunctionDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitFunctionDef(this);
		}
	}

	[RuleVersion(0)]
	public Function_definitionContext function_definition() {
		Function_definitionContext _localctx = new Function_definitionContext(Context, State);
		EnterRule(_localctx, 20, RULE_function_definition);
		try {
			_localctx = new FunctionDefContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			type();
			State = 150;
			Match(ID);
			State = 151;
			Match(L_PAR);
			State = 152;
			parameter_list();
			State = 153;
			Match(P_PAR);
			State = 154;
			Match(L_CURL);
			State = 155;
			statement_block();
			State = 156;
			Match(P_CURL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_listContext : ParserRuleContext {
		public Parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_list; } }
	 
		public Parameter_listContext() { }
		public virtual void CopyFrom(Parameter_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NoParametersContext : Parameter_listContext {
		public NoParametersContext(Parameter_listContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterNoParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitNoParameters(this);
		}
	}
	public partial class ParameterListContext : Parameter_listContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ParameterListContext(Parameter_listContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_listContext parameter_list() {
		Parameter_listContext _localctx = new Parameter_listContext(Context, State);
		EnterRule(_localctx, 22, RULE_parameter_list);
		int _la;
		try {
			State = 167;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case P_PAR:
				_localctx = new NoParametersContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case SHORT_NAME:
			case INTEGER_NAME:
			case LONG_NAME:
			case FLOAT_NAME:
			case DOUBLE_NAME:
			case BOOL_NAME:
			case STRING_NAME:
			case NUMBER_NAME:
				_localctx = new ParameterListContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 159;
				parameter();
				State = 164;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__6) {
					{
					{
					State = 160;
					Match(T__6);
					State = 161;
					parameter();
					}
					}
					State = 166;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
	 
		public ParameterContext() { }
		public virtual void CopyFrom(ParameterContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParameterDeclareContext : ParameterContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(KermitLangParser.ID, 0); }
		public ParameterDeclareContext(ParameterContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterParameterDeclare(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitParameterDeclare(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 24, RULE_parameter);
		try {
			_localctx = new ParameterDeclareContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 169;
			type();
			State = 170;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_callContext : ParserRuleContext {
		public Function_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call; } }
	 
		public Function_callContext() { }
		public virtual void CopyFrom(Function_callContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FunctionInvokeContext : Function_callContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(KermitLangParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAR() { return GetToken(KermitLangParser.L_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode P_PAR() { return GetToken(KermitLangParser.P_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public FunctionInvokeContext(Function_callContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterFunctionInvoke(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitFunctionInvoke(this);
		}
	}

	[RuleVersion(0)]
	public Function_callContext function_call() {
		Function_callContext _localctx = new Function_callContext(Context, State);
		EnterRule(_localctx, 26, RULE_function_call);
		int _la;
		try {
			_localctx = new FunctionInvokeContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 172;
			Match(ID);
			State = 173;
			Match(L_PAR);
			State = 175;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2214594304L) != 0)) {
				{
				State = 174;
				argument_list();
				}
			}

			State = 177;
			Match(P_PAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Argument_listContext : ParserRuleContext {
		public Argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_list; } }
	 
		public Argument_listContext() { }
		public virtual void CopyFrom(Argument_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ArgumentListContext : Argument_listContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArgumentListContext(Argument_listContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
	}

	[RuleVersion(0)]
	public Argument_listContext argument_list() {
		Argument_listContext _localctx = new Argument_listContext(Context, State);
		EnterRule(_localctx, 28, RULE_argument_list);
		int _la;
		try {
			_localctx = new ArgumentListContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 179;
			expression();
			State = 184;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6) {
				{
				{
				State = 180;
				Match(T__6);
				State = 181;
				expression();
				}
				}
				State = 186;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_CURL() { return GetToken(KermitLangParser.L_CURL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode P_CURL() { return GetToken(KermitLangParser.P_CURL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Base_statementContext[] base_statement() {
			return GetRuleContexts<Base_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Base_statementContext base_statement(int i) {
			return GetRuleContext<Base_statementContext>(i);
		}
		public Statement_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterStatement_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitStatement_block(this);
		}
	}

	[RuleVersion(0)]
	public Statement_blockContext statement_block() {
		Statement_blockContext _localctx = new Statement_blockContext(Context, State);
		EnterRule(_localctx, 30, RULE_statement_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			Match(L_CURL);
			State = 191;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 132052992L) != 0)) {
				{
				{
				State = 188;
				base_statement();
				}
				}
				State = 193;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 194;
			Match(P_CURL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_definitionContext : ParserRuleContext {
		public Struct_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_definition; } }
	 
		public Struct_definitionContext() { }
		public virtual void CopyFrom(Struct_definitionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StructDefContext : Struct_definitionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(KermitLangParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(KermitLangParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_CURL() { return GetToken(KermitLangParser.L_CURL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode P_CURL() { return GetToken(KermitLangParser.P_CURL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Struct_bodyContext struct_body() {
			return GetRuleContext<Struct_bodyContext>(0);
		}
		public StructDefContext(Struct_definitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterStructDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitStructDef(this);
		}
	}

	[RuleVersion(0)]
	public Struct_definitionContext struct_definition() {
		Struct_definitionContext _localctx = new Struct_definitionContext(Context, State);
		EnterRule(_localctx, 32, RULE_struct_definition);
		try {
			_localctx = new StructDefContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 196;
			Match(STRUCT);
			State = 197;
			Match(ID);
			State = 198;
			Match(L_CURL);
			{
			State = 199;
			struct_body();
			}
			State = 200;
			Match(P_CURL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_bodyContext : ParserRuleContext {
		public Struct_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_body; } }
	 
		public Struct_bodyContext() { }
		public virtual void CopyFrom(Struct_bodyContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StructMembersContext : Struct_bodyContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(KermitLangParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(KermitLangParser.ID, i);
		}
		public StructMembersContext(Struct_bodyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.EnterStructMembers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKermitLangListener typedListener = listener as IKermitLangListener;
			if (typedListener != null) typedListener.ExitStructMembers(this);
		}
	}

	[RuleVersion(0)]
	public Struct_bodyContext struct_body() {
		Struct_bodyContext _localctx = new Struct_bodyContext(Context, State);
		EnterRule(_localctx, 34, RULE_struct_body);
		int _la;
		try {
			_localctx = new StructMembersContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 202;
			type();
			State = 203;
			Match(ID);
			State = 204;
			Match(T__0);
			State = 211;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 50526208L) != 0)) {
				{
				{
				State = 205;
				type();
				State = 206;
				Match(ID);
				State = 207;
				Match(T__0);
				}
				}
				State = 213;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,36,215,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,1,0,5,0,38,8,0,10,0,12,0,41,9,0,1,1,1,1,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,78,8,
		2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,91,8,4,1,5,1,5,1,5,1,
		5,1,5,1,5,1,5,1,5,1,5,3,5,102,8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
		1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,121,8,6,1,7,1,7,1,7,1,7,1,7,1,7,1,
		7,1,7,1,7,3,7,132,8,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,
		1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,
		1,11,1,11,5,11,163,8,11,10,11,12,11,166,9,11,3,11,168,8,11,1,12,1,12,1,
		12,1,13,1,13,1,13,3,13,176,8,13,1,13,1,13,1,14,1,14,1,14,5,14,183,8,14,
		10,14,12,14,186,9,14,1,15,1,15,5,15,190,8,15,10,15,12,15,193,9,15,1,15,
		1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
		5,17,210,8,17,10,17,12,17,213,9,17,1,17,0,0,18,0,2,4,6,8,10,12,14,16,18,
		20,22,24,26,28,30,32,34,0,2,3,0,11,15,17,17,24,25,2,0,9,9,26,26,223,0,
		39,1,0,0,0,2,42,1,0,0,0,4,77,1,0,0,0,6,79,1,0,0,0,8,90,1,0,0,0,10,101,
		1,0,0,0,12,120,1,0,0,0,14,131,1,0,0,0,16,133,1,0,0,0,18,141,1,0,0,0,20,
		149,1,0,0,0,22,167,1,0,0,0,24,169,1,0,0,0,26,172,1,0,0,0,28,179,1,0,0,
		0,30,187,1,0,0,0,32,196,1,0,0,0,34,202,1,0,0,0,36,38,3,2,1,0,37,36,1,0,
		0,0,38,41,1,0,0,0,39,37,1,0,0,0,39,40,1,0,0,0,40,1,1,0,0,0,41,39,1,0,0,
		0,42,43,3,4,2,0,43,3,1,0,0,0,44,45,3,6,3,0,45,46,5,26,0,0,46,47,3,8,4,
		0,47,48,5,1,0,0,48,78,1,0,0,0,49,50,5,26,0,0,50,51,5,2,0,0,51,52,3,8,4,
		0,52,53,5,1,0,0,53,78,1,0,0,0,54,55,5,18,0,0,55,56,5,31,0,0,56,57,3,8,
		4,0,57,58,5,32,0,0,58,59,5,1,0,0,59,78,1,0,0,0,60,61,5,19,0,0,61,62,5,
		31,0,0,62,63,5,26,0,0,63,64,5,32,0,0,64,78,5,1,0,0,65,66,3,16,8,0,66,67,
		5,1,0,0,67,78,1,0,0,0,68,69,3,18,9,0,69,70,5,1,0,0,70,78,1,0,0,0,71,72,
		3,20,10,0,72,73,5,1,0,0,73,78,1,0,0,0,74,75,3,32,16,0,75,76,5,1,0,0,76,
		78,1,0,0,0,77,44,1,0,0,0,77,49,1,0,0,0,77,54,1,0,0,0,77,60,1,0,0,0,77,
		65,1,0,0,0,77,68,1,0,0,0,77,71,1,0,0,0,77,74,1,0,0,0,78,5,1,0,0,0,79,80,
		7,0,0,0,80,7,1,0,0,0,81,82,3,10,5,0,82,83,5,27,0,0,83,84,3,8,4,0,84,91,
		1,0,0,0,85,86,3,10,5,0,86,87,5,28,0,0,87,88,3,8,4,0,88,91,1,0,0,0,89,91,
		3,10,5,0,90,81,1,0,0,0,90,85,1,0,0,0,90,89,1,0,0,0,91,9,1,0,0,0,92,93,
		3,12,6,0,93,94,5,29,0,0,94,95,3,10,5,0,95,102,1,0,0,0,96,97,3,12,6,0,97,
		98,5,30,0,0,98,99,3,10,5,0,99,102,1,0,0,0,100,102,3,12,6,0,101,92,1,0,
		0,0,101,96,1,0,0,0,101,100,1,0,0,0,102,11,1,0,0,0,103,104,3,14,7,0,104,
		105,5,3,0,0,105,106,3,12,6,0,106,121,1,0,0,0,107,108,3,14,7,0,108,109,
		5,4,0,0,109,110,3,12,6,0,110,121,1,0,0,0,111,112,3,14,7,0,112,113,5,5,
		0,0,113,114,3,12,6,0,114,121,1,0,0,0,115,116,3,14,7,0,116,117,5,6,0,0,
		117,118,3,12,6,0,118,121,1,0,0,0,119,121,3,14,7,0,120,103,1,0,0,0,120,
		107,1,0,0,0,120,111,1,0,0,0,120,115,1,0,0,0,120,119,1,0,0,0,121,13,1,0,
		0,0,122,132,5,26,0,0,123,132,5,9,0,0,124,132,5,8,0,0,125,132,5,10,0,0,
		126,127,5,31,0,0,127,128,3,8,4,0,128,129,5,32,0,0,129,132,1,0,0,0,130,
		132,3,26,13,0,131,122,1,0,0,0,131,123,1,0,0,0,131,124,1,0,0,0,131,125,
		1,0,0,0,131,126,1,0,0,0,131,130,1,0,0,0,132,15,1,0,0,0,133,134,5,20,0,
		0,134,135,5,31,0,0,135,136,7,1,0,0,136,137,5,32,0,0,137,138,5,33,0,0,138,
		139,3,30,15,0,139,140,5,34,0,0,140,17,1,0,0,0,141,142,5,22,0,0,142,143,
		5,31,0,0,143,144,3,8,4,0,144,145,5,32,0,0,145,146,5,33,0,0,146,147,3,30,
		15,0,147,148,5,34,0,0,148,19,1,0,0,0,149,150,3,6,3,0,150,151,5,26,0,0,
		151,152,5,31,0,0,152,153,3,22,11,0,153,154,5,32,0,0,154,155,5,33,0,0,155,
		156,3,30,15,0,156,157,5,34,0,0,157,21,1,0,0,0,158,168,1,0,0,0,159,164,
		3,24,12,0,160,161,5,7,0,0,161,163,3,24,12,0,162,160,1,0,0,0,163,166,1,
		0,0,0,164,162,1,0,0,0,164,165,1,0,0,0,165,168,1,0,0,0,166,164,1,0,0,0,
		167,158,1,0,0,0,167,159,1,0,0,0,168,23,1,0,0,0,169,170,3,6,3,0,170,171,
		5,26,0,0,171,25,1,0,0,0,172,173,5,26,0,0,173,175,5,31,0,0,174,176,3,28,
		14,0,175,174,1,0,0,0,175,176,1,0,0,0,176,177,1,0,0,0,177,178,5,32,0,0,
		178,27,1,0,0,0,179,184,3,8,4,0,180,181,5,7,0,0,181,183,3,8,4,0,182,180,
		1,0,0,0,183,186,1,0,0,0,184,182,1,0,0,0,184,185,1,0,0,0,185,29,1,0,0,0,
		186,184,1,0,0,0,187,191,5,33,0,0,188,190,3,2,1,0,189,188,1,0,0,0,190,193,
		1,0,0,0,191,189,1,0,0,0,191,192,1,0,0,0,192,194,1,0,0,0,193,191,1,0,0,
		0,194,195,5,34,0,0,195,31,1,0,0,0,196,197,5,23,0,0,197,198,5,26,0,0,198,
		199,5,33,0,0,199,200,3,34,17,0,200,201,5,34,0,0,201,33,1,0,0,0,202,203,
		3,6,3,0,203,204,5,26,0,0,204,211,5,1,0,0,205,206,3,6,3,0,206,207,5,26,
		0,0,207,208,5,1,0,0,208,210,1,0,0,0,209,205,1,0,0,0,210,213,1,0,0,0,211,
		209,1,0,0,0,211,212,1,0,0,0,212,35,1,0,0,0,213,211,1,0,0,0,12,39,77,90,
		101,120,131,164,167,175,184,191,211
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
