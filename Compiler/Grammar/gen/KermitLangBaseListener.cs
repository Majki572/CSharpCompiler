//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/jakub/Documents/CSharpCompiler/Compiler/Grammar/KermitLang.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IKermitLangListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class KermitLangBaseListener : IKermitLangListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="KermitLangParser.start"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStart([NotNull] KermitLangParser.StartContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="KermitLangParser.start"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStart([NotNull] KermitLangParser.StartContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="KermitLangParser.base_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBase_statement([NotNull] KermitLangParser.Base_statementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="KermitLangParser.base_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBase_statement([NotNull] KermitLangParser.Base_statementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>declare</c>
	/// labeled alternative in <see cref="KermitLangParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDeclare([NotNull] KermitLangParser.DeclareContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>declare</c>
	/// labeled alternative in <see cref="KermitLangParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDeclare([NotNull] KermitLangParser.DeclareContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>assign</c>
	/// labeled alternative in <see cref="KermitLangParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAssign([NotNull] KermitLangParser.AssignContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>assign</c>
	/// labeled alternative in <see cref="KermitLangParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAssign([NotNull] KermitLangParser.AssignContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>print</c>
	/// labeled alternative in <see cref="KermitLangParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPrint([NotNull] KermitLangParser.PrintContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>print</c>
	/// labeled alternative in <see cref="KermitLangParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPrint([NotNull] KermitLangParser.PrintContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>read</c>
	/// labeled alternative in <see cref="KermitLangParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRead([NotNull] KermitLangParser.ReadContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>read</c>
	/// labeled alternative in <see cref="KermitLangParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRead([NotNull] KermitLangParser.ReadContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>functionCallExpression</c>
	/// labeled alternative in <see cref="KermitLangParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunctionCallExpression([NotNull] KermitLangParser.FunctionCallExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>functionCallExpression</c>
	/// labeled alternative in <see cref="KermitLangParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunctionCallExpression([NotNull] KermitLangParser.FunctionCallExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>if</c>
	/// labeled alternative in <see cref="KermitLangParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIf([NotNull] KermitLangParser.IfContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>if</c>
	/// labeled alternative in <see cref="KermitLangParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIf([NotNull] KermitLangParser.IfContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>while</c>
	/// labeled alternative in <see cref="KermitLangParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWhile([NotNull] KermitLangParser.WhileContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>while</c>
	/// labeled alternative in <see cref="KermitLangParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWhile([NotNull] KermitLangParser.WhileContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>function</c>
	/// labeled alternative in <see cref="KermitLangParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunction([NotNull] KermitLangParser.FunctionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>function</c>
	/// labeled alternative in <see cref="KermitLangParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunction([NotNull] KermitLangParser.FunctionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>struct</c>
	/// labeled alternative in <see cref="KermitLangParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStruct([NotNull] KermitLangParser.StructContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>struct</c>
	/// labeled alternative in <see cref="KermitLangParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStruct([NotNull] KermitLangParser.StructContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>structEmpty</c>
	/// labeled alternative in <see cref="KermitLangParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStructEmpty([NotNull] KermitLangParser.StructEmptyContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>structEmpty</c>
	/// labeled alternative in <see cref="KermitLangParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStructEmpty([NotNull] KermitLangParser.StructEmptyContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>structAssign</c>
	/// labeled alternative in <see cref="KermitLangParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStructAssign([NotNull] KermitLangParser.StructAssignContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>structAssign</c>
	/// labeled alternative in <see cref="KermitLangParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStructAssign([NotNull] KermitLangParser.StructAssignContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="KermitLangParser.type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterType([NotNull] KermitLangParser.TypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="KermitLangParser.type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitType([NotNull] KermitLangParser.TypeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>expressionBaseAdd</c>
	/// labeled alternative in <see cref="KermitLangParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpressionBaseAdd([NotNull] KermitLangParser.ExpressionBaseAddContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>expressionBaseAdd</c>
	/// labeled alternative in <see cref="KermitLangParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpressionBaseAdd([NotNull] KermitLangParser.ExpressionBaseAddContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>expressionBaseSub</c>
	/// labeled alternative in <see cref="KermitLangParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpressionBaseSub([NotNull] KermitLangParser.ExpressionBaseSubContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>expressionBaseSub</c>
	/// labeled alternative in <see cref="KermitLangParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpressionBaseSub([NotNull] KermitLangParser.ExpressionBaseSubContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>expression1Empty</c>
	/// labeled alternative in <see cref="KermitLangParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpression1Empty([NotNull] KermitLangParser.Expression1EmptyContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>expression1Empty</c>
	/// labeled alternative in <see cref="KermitLangParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpression1Empty([NotNull] KermitLangParser.Expression1EmptyContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>expressionBaseMul</c>
	/// labeled alternative in <see cref="KermitLangParser.expression1"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpressionBaseMul([NotNull] KermitLangParser.ExpressionBaseMulContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>expressionBaseMul</c>
	/// labeled alternative in <see cref="KermitLangParser.expression1"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpressionBaseMul([NotNull] KermitLangParser.ExpressionBaseMulContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>expressionBaseDiv</c>
	/// labeled alternative in <see cref="KermitLangParser.expression1"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpressionBaseDiv([NotNull] KermitLangParser.ExpressionBaseDivContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>expressionBaseDiv</c>
	/// labeled alternative in <see cref="KermitLangParser.expression1"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpressionBaseDiv([NotNull] KermitLangParser.ExpressionBaseDivContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>expression2Empty</c>
	/// labeled alternative in <see cref="KermitLangParser.expression1"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpression2Empty([NotNull] KermitLangParser.Expression2EmptyContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>expression2Empty</c>
	/// labeled alternative in <see cref="KermitLangParser.expression1"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpression2Empty([NotNull] KermitLangParser.Expression2EmptyContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>and</c>
	/// labeled alternative in <see cref="KermitLangParser.expression2"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAnd([NotNull] KermitLangParser.AndContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>and</c>
	/// labeled alternative in <see cref="KermitLangParser.expression2"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAnd([NotNull] KermitLangParser.AndContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>or</c>
	/// labeled alternative in <see cref="KermitLangParser.expression2"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterOr([NotNull] KermitLangParser.OrContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>or</c>
	/// labeled alternative in <see cref="KermitLangParser.expression2"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitOr([NotNull] KermitLangParser.OrContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>xor</c>
	/// labeled alternative in <see cref="KermitLangParser.expression2"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterXor([NotNull] KermitLangParser.XorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>xor</c>
	/// labeled alternative in <see cref="KermitLangParser.expression2"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitXor([NotNull] KermitLangParser.XorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>neg</c>
	/// labeled alternative in <see cref="KermitLangParser.expression2"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNeg([NotNull] KermitLangParser.NegContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>neg</c>
	/// labeled alternative in <see cref="KermitLangParser.expression2"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNeg([NotNull] KermitLangParser.NegContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>expression3Empty</c>
	/// labeled alternative in <see cref="KermitLangParser.expression2"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpression3Empty([NotNull] KermitLangParser.Expression3EmptyContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>expression3Empty</c>
	/// labeled alternative in <see cref="KermitLangParser.expression2"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpression3Empty([NotNull] KermitLangParser.Expression3EmptyContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>id</c>
	/// labeled alternative in <see cref="KermitLangParser.expression3"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterId([NotNull] KermitLangParser.IdContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>id</c>
	/// labeled alternative in <see cref="KermitLangParser.expression3"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitId([NotNull] KermitLangParser.IdContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>bool</c>
	/// labeled alternative in <see cref="KermitLangParser.expression3"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBool([NotNull] KermitLangParser.BoolContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>bool</c>
	/// labeled alternative in <see cref="KermitLangParser.expression3"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBool([NotNull] KermitLangParser.BoolContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>number</c>
	/// labeled alternative in <see cref="KermitLangParser.expression3"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNumber([NotNull] KermitLangParser.NumberContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>number</c>
	/// labeled alternative in <see cref="KermitLangParser.expression3"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNumber([NotNull] KermitLangParser.NumberContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>string</c>
	/// labeled alternative in <see cref="KermitLangParser.expression3"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterString([NotNull] KermitLangParser.StringContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>string</c>
	/// labeled alternative in <see cref="KermitLangParser.expression3"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitString([NotNull] KermitLangParser.StringContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>expressionInParens</c>
	/// labeled alternative in <see cref="KermitLangParser.expression3"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpressionInParens([NotNull] KermitLangParser.ExpressionInParensContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>expressionInParens</c>
	/// labeled alternative in <see cref="KermitLangParser.expression3"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpressionInParens([NotNull] KermitLangParser.ExpressionInParensContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>structMember</c>
	/// labeled alternative in <see cref="KermitLangParser.expression3"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStructMember([NotNull] KermitLangParser.StructMemberContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>structMember</c>
	/// labeled alternative in <see cref="KermitLangParser.expression3"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStructMember([NotNull] KermitLangParser.StructMemberContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>functionCall</c>
	/// labeled alternative in <see cref="KermitLangParser.expression3"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunctionCall([NotNull] KermitLangParser.FunctionCallContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>functionCall</c>
	/// labeled alternative in <see cref="KermitLangParser.expression3"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunctionCall([NotNull] KermitLangParser.FunctionCallContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ifStatement</c>
	/// labeled alternative in <see cref="KermitLangParser.if_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIfStatement([NotNull] KermitLangParser.IfStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ifStatement</c>
	/// labeled alternative in <see cref="KermitLangParser.if_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIfStatement([NotNull] KermitLangParser.IfStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>equal</c>
	/// labeled alternative in <see cref="KermitLangParser.compareStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEqual([NotNull] KermitLangParser.EqualContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>equal</c>
	/// labeled alternative in <see cref="KermitLangParser.compareStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEqual([NotNull] KermitLangParser.EqualContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>notEqual</c>
	/// labeled alternative in <see cref="KermitLangParser.compareStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNotEqual([NotNull] KermitLangParser.NotEqualContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>notEqual</c>
	/// labeled alternative in <see cref="KermitLangParser.compareStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNotEqual([NotNull] KermitLangParser.NotEqualContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>lessThan</c>
	/// labeled alternative in <see cref="KermitLangParser.compareStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLessThan([NotNull] KermitLangParser.LessThanContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>lessThan</c>
	/// labeled alternative in <see cref="KermitLangParser.compareStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLessThan([NotNull] KermitLangParser.LessThanContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>greaterThan</c>
	/// labeled alternative in <see cref="KermitLangParser.compareStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGreaterThan([NotNull] KermitLangParser.GreaterThanContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>greaterThan</c>
	/// labeled alternative in <see cref="KermitLangParser.compareStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGreaterThan([NotNull] KermitLangParser.GreaterThanContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>lessThanEqual</c>
	/// labeled alternative in <see cref="KermitLangParser.compareStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLessThanEqual([NotNull] KermitLangParser.LessThanEqualContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>lessThanEqual</c>
	/// labeled alternative in <see cref="KermitLangParser.compareStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLessThanEqual([NotNull] KermitLangParser.LessThanEqualContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>greaterThanEqual</c>
	/// labeled alternative in <see cref="KermitLangParser.compareStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGreaterThanEqual([NotNull] KermitLangParser.GreaterThanEqualContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>greaterThanEqual</c>
	/// labeled alternative in <see cref="KermitLangParser.compareStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGreaterThanEqual([NotNull] KermitLangParser.GreaterThanEqualContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>boolCompare</c>
	/// labeled alternative in <see cref="KermitLangParser.compareStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBoolCompare([NotNull] KermitLangParser.BoolCompareContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>boolCompare</c>
	/// labeled alternative in <see cref="KermitLangParser.compareStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBoolCompare([NotNull] KermitLangParser.BoolCompareContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>idCompare</c>
	/// labeled alternative in <see cref="KermitLangParser.compareStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIdCompare([NotNull] KermitLangParser.IdCompareContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>idCompare</c>
	/// labeled alternative in <see cref="KermitLangParser.compareStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIdCompare([NotNull] KermitLangParser.IdCompareContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>whileStatement</c>
	/// labeled alternative in <see cref="KermitLangParser.while_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWhileStatement([NotNull] KermitLangParser.WhileStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>whileStatement</c>
	/// labeled alternative in <see cref="KermitLangParser.while_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWhileStatement([NotNull] KermitLangParser.WhileStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>whileCondition</c>
	/// labeled alternative in <see cref="KermitLangParser.while_condition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWhileCondition([NotNull] KermitLangParser.WhileConditionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>whileCondition</c>
	/// labeled alternative in <see cref="KermitLangParser.while_condition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWhileCondition([NotNull] KermitLangParser.WhileConditionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>functionDef</c>
	/// labeled alternative in <see cref="KermitLangParser.function_definition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunctionDef([NotNull] KermitLangParser.FunctionDefContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>functionDef</c>
	/// labeled alternative in <see cref="KermitLangParser.function_definition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunctionDef([NotNull] KermitLangParser.FunctionDefContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>noParameters</c>
	/// labeled alternative in <see cref="KermitLangParser.parameter_list"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNoParameters([NotNull] KermitLangParser.NoParametersContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>noParameters</c>
	/// labeled alternative in <see cref="KermitLangParser.parameter_list"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNoParameters([NotNull] KermitLangParser.NoParametersContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>parameterList</c>
	/// labeled alternative in <see cref="KermitLangParser.parameter_list"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParameterList([NotNull] KermitLangParser.ParameterListContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>parameterList</c>
	/// labeled alternative in <see cref="KermitLangParser.parameter_list"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParameterList([NotNull] KermitLangParser.ParameterListContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="KermitLangParser.parameter"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParameter([NotNull] KermitLangParser.ParameterContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="KermitLangParser.parameter"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParameter([NotNull] KermitLangParser.ParameterContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>functionInvoke</c>
	/// labeled alternative in <see cref="KermitLangParser.function_call"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunctionInvoke([NotNull] KermitLangParser.FunctionInvokeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>functionInvoke</c>
	/// labeled alternative in <see cref="KermitLangParser.function_call"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunctionInvoke([NotNull] KermitLangParser.FunctionInvokeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="KermitLangParser.argument_list"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArgument_list([NotNull] KermitLangParser.Argument_listContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="KermitLangParser.argument_list"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArgument_list([NotNull] KermitLangParser.Argument_listContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="KermitLangParser.statement_block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStatement_block([NotNull] KermitLangParser.Statement_blockContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="KermitLangParser.statement_block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStatement_block([NotNull] KermitLangParser.Statement_blockContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ifStatementBlock</c>
	/// labeled alternative in <see cref="KermitLangParser.statement_block_if"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIfStatementBlock([NotNull] KermitLangParser.IfStatementBlockContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ifStatementBlock</c>
	/// labeled alternative in <see cref="KermitLangParser.statement_block_if"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIfStatementBlock([NotNull] KermitLangParser.IfStatementBlockContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>whileStatementBlock</c>
	/// labeled alternative in <see cref="KermitLangParser.statement_block_while"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWhileStatementBlock([NotNull] KermitLangParser.WhileStatementBlockContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>whileStatementBlock</c>
	/// labeled alternative in <see cref="KermitLangParser.statement_block_while"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWhileStatementBlock([NotNull] KermitLangParser.WhileStatementBlockContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>functionStatementBlock</c>
	/// labeled alternative in <see cref="KermitLangParser.statement_block_function"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunctionStatementBlock([NotNull] KermitLangParser.FunctionStatementBlockContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>functionStatementBlock</c>
	/// labeled alternative in <see cref="KermitLangParser.statement_block_function"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunctionStatementBlock([NotNull] KermitLangParser.FunctionStatementBlockContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>functionReturnStatement</c>
	/// labeled alternative in <see cref="KermitLangParser.function_return_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunctionReturnStatement([NotNull] KermitLangParser.FunctionReturnStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>functionReturnStatement</c>
	/// labeled alternative in <see cref="KermitLangParser.function_return_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunctionReturnStatement([NotNull] KermitLangParser.FunctionReturnStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>structDef</c>
	/// labeled alternative in <see cref="KermitLangParser.struct_definition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStructDef([NotNull] KermitLangParser.StructDefContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>structDef</c>
	/// labeled alternative in <see cref="KermitLangParser.struct_definition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStructDef([NotNull] KermitLangParser.StructDefContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>structMembers</c>
	/// labeled alternative in <see cref="KermitLangParser.struct_body"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStructMembers([NotNull] KermitLangParser.StructMembersContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>structMembers</c>
	/// labeled alternative in <see cref="KermitLangParser.struct_body"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStructMembers([NotNull] KermitLangParser.StructMembersContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
