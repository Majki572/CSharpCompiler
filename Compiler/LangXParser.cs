//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from f:/GitHubRepository/CSharpCompiler/Compiler/Grammar/LangX.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class LangXParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, TYPE=5, ADD=6, SUB=7, MUL=8, DIV=9, STRING=10, 
		WRITE=11, READ=12, ID=13, INT=14, FLOAT=15, NEWLINE=16, WS=17;
	public const int
		RULE_start = 0, RULE_stat = 1, RULE_assign = 2, RULE_reassign = 3, RULE_write = 4, 
		RULE_read = 5, RULE_expr0 = 6, RULE_op1 = 7, RULE_expr1 = 8, RULE_op2 = 9, 
		RULE_expr2 = 10;
	public static readonly string[] ruleNames = {
		"start", "stat", "assign", "reassign", "write", "read", "expr0", "op1", 
		"expr1", "op2", "expr2"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'='", "'('", "')'", null, "'+'", "'-'", "'*'", "'/'", null, 
		"'write'", "'read'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, "TYPE", "ADD", "SUB", "MUL", "DIV", "STRING", 
		"WRITE", "READ", "ID", "INT", "FLOAT", "NEWLINE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LangX.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LangXParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LangXParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LangXParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(LangXParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(LangXParser.NEWLINE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 29;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 6178L) != 0)) {
				{
				{
				State = 23;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 6176L) != 0)) {
					{
					State = 22;
					stat();
					}
				}

				State = 25;
				Match(T__0);
				State = 26;
				Match(NEWLINE);
				}
				}
				State = 31;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignContext assign() {
			return GetRuleContext<AssignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WriteContext write() {
			return GetRuleContext<WriteContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReadContext read() {
			return GetRuleContext<ReadContext>(0);
		}
		public StatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat; } }
	}

	[RuleVersion(0)]
	public StatContext stat() {
		StatContext _localctx = new StatContext(Context, State);
		EnterRule(_localctx, 2, RULE_stat);
		try {
			State = 35;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TYPE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 32;
				assign();
				}
				break;
			case WRITE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 33;
				write();
				}
				break;
			case READ:
				EnterOuterAlt(_localctx, 3);
				{
				State = 34;
				read();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignContext : ParserRuleContext {
		public AssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign; } }
	 
		public AssignContext() { }
		public virtual void CopyFrom(AssignContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExprContext : AssignContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(LangXParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(LangXParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LangXParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr0Context expr0() {
			return GetRuleContext<Expr0Context>(0);
		}
		public ExprContext(AssignContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public AssignContext assign() {
		AssignContext _localctx = new AssignContext(Context, State);
		EnterRule(_localctx, 4, RULE_assign);
		try {
			_localctx = new ExprContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 37;
			Match(TYPE);
			State = 38;
			Match(WS);
			State = 39;
			Match(ID);
			State = 40;
			Match(T__1);
			State = 41;
			expr0();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReassignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LangXParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr0Context expr0() {
			return GetRuleContext<Expr0Context>(0);
		}
		public ReassignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reassign; } }
	}

	[RuleVersion(0)]
	public ReassignContext reassign() {
		ReassignContext _localctx = new ReassignContext(Context, State);
		EnterRule(_localctx, 6, RULE_reassign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43;
			Match(ID);
			State = 44;
			Match(T__1);
			State = 45;
			expr0();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WriteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE() { return GetToken(LangXParser.WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(LangXParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr0Context expr0() {
			return GetRuleContext<Expr0Context>(0);
		}
		public WriteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_write; } }
	}

	[RuleVersion(0)]
	public WriteContext write() {
		WriteContext _localctx = new WriteContext(Context, State);
		EnterRule(_localctx, 8, RULE_write);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47;
			Match(WRITE);
			State = 48;
			Match(WS);
			State = 49;
			expr0();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(LangXParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(LangXParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LangXParser.ID, 0); }
		public ReadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_read; } }
	}

	[RuleVersion(0)]
	public ReadContext read() {
		ReadContext _localctx = new ReadContext(Context, State);
		EnterRule(_localctx, 10, RULE_read);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			Match(READ);
			State = 52;
			Match(WS);
			State = 53;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr0Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expr1Context expr1() {
			return GetRuleContext<Expr1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Op1Context[] op1() {
			return GetRuleContexts<Op1Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Op1Context op1(int i) {
			return GetRuleContext<Op1Context>(i);
		}
		public Expr0Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr0; } }
	}

	[RuleVersion(0)]
	public Expr0Context expr0() {
		Expr0Context _localctx = new Expr0Context(Context, State);
		EnterRule(_localctx, 12, RULE_expr0);
		int _la;
		try {
			State = 63;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 55;
				expr1();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 56;
				expr1();
				State = 60;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==ADD || _la==SUB) {
					{
					{
					State = 57;
					op1();
					}
					}
					State = 62;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op1Context : ParserRuleContext {
		public Op1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op1; } }
	 
		public Op1Context() { }
		public virtual void CopyFrom(Op1Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class AddContext : Op1Context {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(LangXParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr1Context expr1() {
			return GetRuleContext<Expr1Context>(0);
		}
		public AddContext(Op1Context context) { CopyFrom(context); }
	}
	public partial class SubContext : Op1Context {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(LangXParser.SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr1Context expr1() {
			return GetRuleContext<Expr1Context>(0);
		}
		public SubContext(Op1Context context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public Op1Context op1() {
		Op1Context _localctx = new Op1Context(Context, State);
		EnterRule(_localctx, 14, RULE_op1);
		try {
			State = 69;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
				_localctx = new AddContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 65;
				Match(ADD);
				State = 66;
				expr1();
				}
				break;
			case SUB:
				_localctx = new SubContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 67;
				Match(SUB);
				State = 68;
				expr1();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr1Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expr2Context expr2() {
			return GetRuleContext<Expr2Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Op2Context[] op2() {
			return GetRuleContexts<Op2Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Op2Context op2(int i) {
			return GetRuleContext<Op2Context>(i);
		}
		public Expr1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr1; } }
	}

	[RuleVersion(0)]
	public Expr1Context expr1() {
		Expr1Context _localctx = new Expr1Context(Context, State);
		EnterRule(_localctx, 16, RULE_expr1);
		int _la;
		try {
			State = 79;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 71;
				expr2();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 72;
				expr2();
				State = 76;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==MUL || _la==DIV) {
					{
					{
					State = 73;
					op2();
					}
					}
					State = 78;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op2Context : ParserRuleContext {
		public Op2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op2; } }
	 
		public Op2Context() { }
		public virtual void CopyFrom(Op2Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class DivContext : Op2Context {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(LangXParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr2Context expr2() {
			return GetRuleContext<Expr2Context>(0);
		}
		public DivContext(Op2Context context) { CopyFrom(context); }
	}
	public partial class MulContext : Op2Context {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(LangXParser.MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr2Context expr2() {
			return GetRuleContext<Expr2Context>(0);
		}
		public MulContext(Op2Context context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public Op2Context op2() {
		Op2Context _localctx = new Op2Context(Context, State);
		EnterRule(_localctx, 18, RULE_op2);
		try {
			State = 85;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MUL:
				_localctx = new MulContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 81;
				Match(MUL);
				State = 82;
				expr2();
				}
				break;
			case DIV:
				_localctx = new DivContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 83;
				Match(DIV);
				State = 84;
				expr2();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr2Context : ParserRuleContext {
		public Expr2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr2; } }
	 
		public Expr2Context() { }
		public virtual void CopyFrom(Expr2Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class StringContext : Expr2Context {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(LangXParser.STRING, 0); }
		public StringContext(Expr2Context context) { CopyFrom(context); }
	}
	public partial class IdContext : Expr2Context {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LangXParser.ID, 0); }
		public IdContext(Expr2Context context) { CopyFrom(context); }
	}
	public partial class ExprInParensContext : Expr2Context {
		[System.Diagnostics.DebuggerNonUserCode] public Expr0Context expr0() {
			return GetRuleContext<Expr0Context>(0);
		}
		public ExprInParensContext(Expr2Context context) { CopyFrom(context); }
	}
	public partial class FloatContext : Expr2Context {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(LangXParser.FLOAT, 0); }
		public FloatContext(Expr2Context context) { CopyFrom(context); }
	}
	public partial class IntContext : Expr2Context {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(LangXParser.INT, 0); }
		public IntContext(Expr2Context context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public Expr2Context expr2() {
		Expr2Context _localctx = new Expr2Context(Context, State);
		EnterRule(_localctx, 20, RULE_expr2);
		try {
			State = 95;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
				_localctx = new IntContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 87;
				Match(INT);
				}
				break;
			case FLOAT:
				_localctx = new FloatContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 88;
				Match(FLOAT);
				}
				break;
			case ID:
				_localctx = new IdContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 89;
				Match(ID);
				}
				break;
			case STRING:
				_localctx = new StringContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 90;
				Match(STRING);
				}
				break;
			case T__2:
				_localctx = new ExprInParensContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 91;
				Match(T__2);
				State = 92;
				expr0();
				State = 93;
				Match(T__3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,17,98,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,1,0,3,0,24,8,0,1,0,1,0,5,0,28,8,0,10,0,12,
		0,31,9,0,1,1,1,1,1,1,3,1,36,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,
		3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,5,6,59,8,6,10,6,12,6,62,
		9,6,3,6,64,8,6,1,7,1,7,1,7,1,7,3,7,70,8,7,1,8,1,8,1,8,5,8,75,8,8,10,8,
		12,8,78,9,8,3,8,80,8,8,1,9,1,9,1,9,1,9,3,9,86,8,9,1,10,1,10,1,10,1,10,
		1,10,1,10,1,10,1,10,3,10,96,8,10,1,10,0,0,11,0,2,4,6,8,10,12,14,16,18,
		20,0,0,100,0,29,1,0,0,0,2,35,1,0,0,0,4,37,1,0,0,0,6,43,1,0,0,0,8,47,1,
		0,0,0,10,51,1,0,0,0,12,63,1,0,0,0,14,69,1,0,0,0,16,79,1,0,0,0,18,85,1,
		0,0,0,20,95,1,0,0,0,22,24,3,2,1,0,23,22,1,0,0,0,23,24,1,0,0,0,24,25,1,
		0,0,0,25,26,5,1,0,0,26,28,5,16,0,0,27,23,1,0,0,0,28,31,1,0,0,0,29,27,1,
		0,0,0,29,30,1,0,0,0,30,1,1,0,0,0,31,29,1,0,0,0,32,36,3,4,2,0,33,36,3,8,
		4,0,34,36,3,10,5,0,35,32,1,0,0,0,35,33,1,0,0,0,35,34,1,0,0,0,36,3,1,0,
		0,0,37,38,5,5,0,0,38,39,5,17,0,0,39,40,5,13,0,0,40,41,5,2,0,0,41,42,3,
		12,6,0,42,5,1,0,0,0,43,44,5,13,0,0,44,45,5,2,0,0,45,46,3,12,6,0,46,7,1,
		0,0,0,47,48,5,11,0,0,48,49,5,17,0,0,49,50,3,12,6,0,50,9,1,0,0,0,51,52,
		5,12,0,0,52,53,5,17,0,0,53,54,5,13,0,0,54,11,1,0,0,0,55,64,3,16,8,0,56,
		60,3,16,8,0,57,59,3,14,7,0,58,57,1,0,0,0,59,62,1,0,0,0,60,58,1,0,0,0,60,
		61,1,0,0,0,61,64,1,0,0,0,62,60,1,0,0,0,63,55,1,0,0,0,63,56,1,0,0,0,64,
		13,1,0,0,0,65,66,5,6,0,0,66,70,3,16,8,0,67,68,5,7,0,0,68,70,3,16,8,0,69,
		65,1,0,0,0,69,67,1,0,0,0,70,15,1,0,0,0,71,80,3,20,10,0,72,76,3,20,10,0,
		73,75,3,18,9,0,74,73,1,0,0,0,75,78,1,0,0,0,76,74,1,0,0,0,76,77,1,0,0,0,
		77,80,1,0,0,0,78,76,1,0,0,0,79,71,1,0,0,0,79,72,1,0,0,0,80,17,1,0,0,0,
		81,82,5,8,0,0,82,86,3,20,10,0,83,84,5,9,0,0,84,86,3,20,10,0,85,81,1,0,
		0,0,85,83,1,0,0,0,86,19,1,0,0,0,87,96,5,14,0,0,88,96,5,15,0,0,89,96,5,
		13,0,0,90,96,5,10,0,0,91,92,5,3,0,0,92,93,3,12,6,0,93,94,5,4,0,0,94,96,
		1,0,0,0,95,87,1,0,0,0,95,88,1,0,0,0,95,89,1,0,0,0,95,90,1,0,0,0,95,91,
		1,0,0,0,96,21,1,0,0,0,10,23,29,35,60,63,69,76,79,85,95
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
